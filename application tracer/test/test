{
 "metadata": {
  "name": "",
  "signature": "sha256:c2848e86f218db428d1cd2a6584983fadb5d9d734f00779ea6e84dcf92d65ddd"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from swat import *\n",
      "from swat.datamsghandlers import SAS7BDAT\n",
      "from swat.datamsghandlers import PandasDataFrame\n",
      "\n",
      "import pandas as pd\n",
      "import vincent as vc\n",
      "from pandas import DataFrame\n",
      "from pprint import pprint\n",
      "from IPython.display import display\n",
      "from IPython.html.widgets import interact, interactive, fixed\n",
      "from IPython.html import widgets"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Data: Organics Food Purchase"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "this is the organics food demo"
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Data Loading and Exploration"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Connect to a CAS server on RDCGRD and load some CAS action sets"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s = CAS('rdcgrd001.unx.sas.com', 36521, 'ximeng')\n",
      "#s = CAS('rdcgrd001.unx.sas.com', 19640, 'kesmit')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s.loadactionset?"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s.loadactionset('tkimstat')\n",
      "s.loadactionset('tkcastab')\n",
      "s.loadactionset('tkcasdt');"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 4
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Load table from HDFS"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "This is a customized loadtable action wrapper which adds a table as a result field. This result field is as CASTable object."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s.loadtable?"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "out = s.loadtable('/hps/ximeng/organics.sashdat')\n",
      "out.messages"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "['NOTE: The HDFS file /hps/ximeng/organics.sashdat has been made available to the analytic server as HPS.XIMENG.ORGANICS.']"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "This is a CASTable object"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "out?"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#dat1 = out['casTable']\n",
      "dat1 = s.CASTable('HPS.XIMENG.ORGANICS')\n",
      "type(dat1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "swat.CASTable"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "dat1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "CASTable('HPS.XIMENG.ORGANICS')"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Data Info"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "dat1.info()[['Name','Rows','Columns','CreateTimeFormatted']]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Name</th>\n",
        "      <th>Rows</th>\n",
        "      <th>Columns</th>\n",
        "      <th>CreateTimeFormatted</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> HPS.XIMENG.ORGANICS</td>\n",
        "      <td> 1688948</td>\n",
        "      <td> 36</td>\n",
        "      <td> 20Nov2014:12:27:35</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "                  Name     Rows  Columns CreateTimeFormatted\n",
        "0  HPS.XIMENG.ORGANICS  1688948       36  20Nov2014:12:27:35"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "out = dat1.columninfo()\n",
      "out"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<table class=\"cas-dataframe\">\n",
        "<thead>\n",
        "<tr><th colspan=\"9\">Column Information for HPS.XIMENG.ORGANICS</th></tr>\n",
        "<tr>\n",
        "<th>Column</th>\n",
        "<th>Label</th>\n",
        "<th>ID</th>\n",
        "<th>Type</th>\n",
        "<th>RawLength</th>\n",
        "<th>FormattedLength</th>\n",
        "<th>Format</th>\n",
        "<th>NFL</th>\n",
        "<th>NFD</th>\n",
        "</tr>\n",
        "</thead>\n",
        "<tbody>\n",
        "<tr>\n",
        "<td>ID</td>\n",
        "<td>Customer ID</td>\n",
        "<td>1</td>\n",
        "<td>char</td>\n",
        "<td>10</td>\n",
        "<td>10</td>\n",
        "<td>$</td>\n",
        "<td>10</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>DemAffl</td>\n",
        "<td>Affluence Grade</td>\n",
        "<td>2</td>\n",
        "<td>double</td>\n",
        "<td>8</td>\n",
        "<td>12</td>\n",
        "<td>BEST</td>\n",
        "<td>12</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>DemAge</td>\n",
        "<td>Age</td>\n",
        "<td>3</td>\n",
        "<td>double</td>\n",
        "<td>8</td>\n",
        "<td>12</td>\n",
        "<td>BEST</td>\n",
        "<td>12</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>DemGender</td>\n",
        "<td>Gender</td>\n",
        "<td>4</td>\n",
        "<td>char</td>\n",
        "<td>1</td>\n",
        "<td>1</td>\n",
        "<td>$</td>\n",
        "<td>1</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>DemHomeowner</td>\n",
        "<td>Home Owner</td>\n",
        "<td>5</td>\n",
        "<td>char</td>\n",
        "<td>3</td>\n",
        "<td>3</td>\n",
        "<td>$</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>DemAgeGroup</td>\n",
        "<td>Age Group</td>\n",
        "<td>6</td>\n",
        "<td>char</td>\n",
        "<td>10</td>\n",
        "<td>10</td>\n",
        "<td>$</td>\n",
        "<td>10</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>DemCluster</td>\n",
        "<td>Residential Neighborhood</td>\n",
        "<td>7</td>\n",
        "<td>char</td>\n",
        "<td>2</td>\n",
        "<td>2</td>\n",
        "<td>$</td>\n",
        "<td>2</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>DemReg</td>\n",
        "<td>Geographic Region</td>\n",
        "<td>8</td>\n",
        "<td>char</td>\n",
        "<td>10</td>\n",
        "<td>10</td>\n",
        "<td>$</td>\n",
        "<td>10</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>DemTVReg</td>\n",
        "<td>Television Region</td>\n",
        "<td>9</td>\n",
        "<td>char</td>\n",
        "<td>12</td>\n",
        "<td>12</td>\n",
        "<td>$</td>\n",
        "<td>12</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>DemFlag1</td>\n",
        "<td>Demographic Flag 1</td>\n",
        "<td>10</td>\n",
        "<td>char</td>\n",
        "<td>1</td>\n",
        "<td>1</td>\n",
        "<td>$</td>\n",
        "<td>1</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>DemFlag2</td>\n",
        "<td>Demographic Flag 2</td>\n",
        "<td>11</td>\n",
        "<td>char</td>\n",
        "<td>1</td>\n",
        "<td>1</td>\n",
        "<td>$</td>\n",
        "<td>1</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>DemFlag3</td>\n",
        "<td>Demographic Flag 3</td>\n",
        "<td>12</td>\n",
        "<td>char</td>\n",
        "<td>1</td>\n",
        "<td>1</td>\n",
        "<td>$</td>\n",
        "<td>1</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>DemFlag4</td>\n",
        "<td>Demographic Flag 4</td>\n",
        "<td>13</td>\n",
        "<td>char</td>\n",
        "<td>1</td>\n",
        "<td>1</td>\n",
        "<td>$</td>\n",
        "<td>1</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>DemFlag5</td>\n",
        "<td>Demographic Flag 5</td>\n",
        "<td>14</td>\n",
        "<td>char</td>\n",
        "<td>1</td>\n",
        "<td>1</td>\n",
        "<td>$</td>\n",
        "<td>1</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>DemFlag6</td>\n",
        "<td>Demographic Flag 6</td>\n",
        "<td>15</td>\n",
        "<td>char</td>\n",
        "<td>1</td>\n",
        "<td>1</td>\n",
        "<td>$</td>\n",
        "<td>1</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>DemFlag7</td>\n",
        "<td>Demographic Flag 7</td>\n",
        "<td>16</td>\n",
        "<td>char</td>\n",
        "<td>1</td>\n",
        "<td>1</td>\n",
        "<td>$</td>\n",
        "<td>1</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>DemFlag8</td>\n",
        "<td>Demographic Flag 8</td>\n",
        "<td>17</td>\n",
        "<td>char</td>\n",
        "<td>1</td>\n",
        "<td>1</td>\n",
        "<td>$</td>\n",
        "<td>1</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>PromClass</td>\n",
        "<td>Loyalty Card Class</td>\n",
        "<td>18</td>\n",
        "<td>char</td>\n",
        "<td>8</td>\n",
        "<td>8</td>\n",
        "<td>$</td>\n",
        "<td>8</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>PromTime</td>\n",
        "<td>Loyalty Card Tenure</td>\n",
        "<td>19</td>\n",
        "<td>double</td>\n",
        "<td>8</td>\n",
        "<td>12</td>\n",
        "<td>BEST</td>\n",
        "<td>12</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>TargetBuy</td>\n",
        "<td>Organics Purchase</td>\n",
        "<td>20</td>\n",
        "<td>char</td>\n",
        "<td>10</td>\n",
        "<td>10</td>\n",
        "<td>$</td>\n",
        "<td>10</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Bought_Beverages</td>\n",
        "<td>Bought Beverages</td>\n",
        "<td>21</td>\n",
        "<td>char</td>\n",
        "<td>3</td>\n",
        "<td>3</td>\n",
        "<td>$</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Bought_Bakery</td>\n",
        "<td>Bought Bakery</td>\n",
        "<td>22</td>\n",
        "<td>char</td>\n",
        "<td>3</td>\n",
        "<td>3</td>\n",
        "<td>$</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Bought_Canned</td>\n",
        "<td>Bought Canned</td>\n",
        "<td>23</td>\n",
        "<td>char</td>\n",
        "<td>3</td>\n",
        "<td>3</td>\n",
        "<td>$</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Bought_Dairy</td>\n",
        "<td>Bought Dairy</td>\n",
        "<td>24</td>\n",
        "<td>char</td>\n",
        "<td>3</td>\n",
        "<td>3</td>\n",
        "<td>$</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Bought_Baking</td>\n",
        "<td>Bought Baking</td>\n",
        "<td>25</td>\n",
        "<td>char</td>\n",
        "<td>3</td>\n",
        "<td>3</td>\n",
        "<td>$</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Bought_Frozen</td>\n",
        "<td>Bought Frozen</td>\n",
        "<td>26</td>\n",
        "<td>char</td>\n",
        "<td>3</td>\n",
        "<td>3</td>\n",
        "<td>$</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Bought_Meat</td>\n",
        "<td>Bought Meat</td>\n",
        "<td>27</td>\n",
        "<td>char</td>\n",
        "<td>3</td>\n",
        "<td>3</td>\n",
        "<td>$</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Bought_Fruits</td>\n",
        "<td>Bought Fruits</td>\n",
        "<td>28</td>\n",
        "<td>char</td>\n",
        "<td>3</td>\n",
        "<td>3</td>\n",
        "<td>$</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Bought_Vegetables</td>\n",
        "<td>Bought Vegetables</td>\n",
        "<td>29</td>\n",
        "<td>char</td>\n",
        "<td>3</td>\n",
        "<td>3</td>\n",
        "<td>$</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Bought_Cleaners</td>\n",
        "<td>Bought Cleaners</td>\n",
        "<td>30</td>\n",
        "<td>char</td>\n",
        "<td>3</td>\n",
        "<td>3</td>\n",
        "<td>$</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Bought_PaperGoods</td>\n",
        "<td>Bought PaperGoods</td>\n",
        "<td>31</td>\n",
        "<td>char</td>\n",
        "<td>3</td>\n",
        "<td>3</td>\n",
        "<td>$</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Bought_Others</td>\n",
        "<td>Bought Others</td>\n",
        "<td>32</td>\n",
        "<td>char</td>\n",
        "<td>3</td>\n",
        "<td>3</td>\n",
        "<td>$</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>purchase_3mon</td>\n",
        "<td>Recent 3 Month Purchase</td>\n",
        "<td>33</td>\n",
        "<td>double</td>\n",
        "<td>8</td>\n",
        "<td>12</td>\n",
        "<td>BEST</td>\n",
        "<td>12</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>purchase_6mon</td>\n",
        "<td>Recent 6 Month Purchase</td>\n",
        "<td>34</td>\n",
        "<td>double</td>\n",
        "<td>8</td>\n",
        "<td>12</td>\n",
        "<td>BEST</td>\n",
        "<td>12</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>purchase_9mon</td>\n",
        "<td>Recent 9 Month Purchase</td>\n",
        "<td>35</td>\n",
        "<td>double</td>\n",
        "<td>8</td>\n",
        "<td>12</td>\n",
        "<td>BEST</td>\n",
        "<td>12</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>purchase_12mon</td>\n",
        "<td>Recent 12 Month Purchase</td>\n",
        "<td>36</td>\n",
        "<td>double</td>\n",
        "<td>8</td>\n",
        "<td>12</td>\n",
        "<td>BEST</td>\n",
        "<td>12</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "</tbody>\n",
        "</table>"
       ],
       "javascript": [
        "\n",
        "   (function ($) {\n",
        "      var custom = $('link[rel=\"stylesheet\"][href^=\"/static/custom/custom.css\"]');\n",
        "      var head = $('head');\n",
        "      $.each([\"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/css/swat.css\", \"//cdn.datatables.net/1.10.3/css/jquery.dataTables.min.css\"], function (index, value) {\n",
        "         if ( $('link[rel=\"stylesheet\"][href=\"' + value + '\"]').length == 0 ) {\n",
        "            if ( custom.length > 0 ) {\n",
        "               custom.before($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            } else {\n",
        "               head.prepend($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            }\n",
        "         }\n",
        "      });\n",
        "   })($);\n",
        "\n",
        "   requirejs.config({enforceDefine:true});\n",
        "\n",
        "   require([\"datatables\", \"swat\"], function () {}, function (err) {\n",
        "      var ids = err.requireModules;\n",
        "      if ( ids && ids.length ) {\n",
        "         var configpaths = {\"datatables\": \"//cdn.datatables.net/1.10.3/js/jquery.dataTables.min\", \"swat\": \"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/js/swat\"};\n",
        "         for ( var i = 0; i < ids.length; i++ ) {\n",
        "            var id = ids[i];\n",
        "            var paths = {};\n",
        "            paths[id] = configpaths[id];\n",
        "            requirejs.undef(id);\n",
        "            requirejs.config({paths:paths});\n",
        "            require([id], function () {});\n",
        "         } \n",
        "      }\n",
        "   });\n",
        "   \n",
        "         require(['swat'], function (swat) {\n",
        "            new swat.CASDataFrame(element, JSON.parse('{\\u0022columns\\u0022: [{\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 0;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Column\\u0022, \\u0022targets\\u0022: 0}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 1;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Label\\u0022, \\u0022targets\\u0022: 1}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 2;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022ID\\u0022, \\u0022targets\\u0022: 2}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 3;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Type\\u0022, \\u0022targets\\u0022: 3}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 4;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022RawLength\\u0022, \\u0022targets\\u0022: 4}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 5;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022FormattedLength\\u0022, \\u0022targets\\u0022: 5}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 6;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Format\\u0022, \\u0022targets\\u0022: 6}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 7;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022NFL\\u0022, \\u0022targets\\u0022: 7}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 8;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022NFD\\u0022, \\u0022targets\\u0022: 8}], \\u0022label\\u0022: \\u0022Column Information for HPS.XIMENG.ORGANICS\\u0022, \\u0022data\\u0022: [[[\\u0022ID\\u0022], [\\u0022Customer ID\\u0022], [\\u00221\\u0022, 1], [\\u0022char\\u0022], [\\u002210\\u0022, 10], [\\u002210\\u0022, 10], [\\u0022$\\u0022], [\\u002210\\u0022, 10], [\\u00220\\u0022, 0]], [[\\u0022DemAffl\\u0022], [\\u0022Affluence Grade\\u0022], [\\u00222\\u0022, 2], [\\u0022double\\u0022], [\\u00228\\u0022, 8], [\\u002212\\u0022, 12], [\\u0022BEST\\u0022], [\\u002212\\u0022, 12], [\\u00220\\u0022, 0]], [[\\u0022DemAge\\u0022], [\\u0022Age\\u0022], [\\u00223\\u0022, 3], [\\u0022double\\u0022], [\\u00228\\u0022, 8], [\\u002212\\u0022, 12], [\\u0022BEST\\u0022], [\\u002212\\u0022, 12], [\\u00220\\u0022, 0]], [[\\u0022DemGender\\u0022], [\\u0022Gender\\u0022], [\\u00224\\u0022, 4], [\\u0022char\\u0022], [\\u00221\\u0022, 1], [\\u00221\\u0022, 1], [\\u0022$\\u0022], [\\u00221\\u0022, 1], [\\u00220\\u0022, 0]], [[\\u0022DemHomeowner\\u0022], [\\u0022Home Owner\\u0022], [\\u00225\\u0022, 5], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022DemAgeGroup\\u0022], [\\u0022Age Group\\u0022], [\\u00226\\u0022, 6], [\\u0022char\\u0022], [\\u002210\\u0022, 10], [\\u002210\\u0022, 10], [\\u0022$\\u0022], [\\u002210\\u0022, 10], [\\u00220\\u0022, 0]], [[\\u0022DemCluster\\u0022], [\\u0022Residential Neighborhood\\u0022], [\\u00227\\u0022, 7], [\\u0022char\\u0022], [\\u00222\\u0022, 2], [\\u00222\\u0022, 2], [\\u0022$\\u0022], [\\u00222\\u0022, 2], [\\u00220\\u0022, 0]], [[\\u0022DemReg\\u0022], [\\u0022Geographic Region\\u0022], [\\u00228\\u0022, 8], [\\u0022char\\u0022], [\\u002210\\u0022, 10], [\\u002210\\u0022, 10], [\\u0022$\\u0022], [\\u002210\\u0022, 10], [\\u00220\\u0022, 0]], [[\\u0022DemTVReg\\u0022], [\\u0022Television Region\\u0022], [\\u00229\\u0022, 9], [\\u0022char\\u0022], [\\u002212\\u0022, 12], [\\u002212\\u0022, 12], [\\u0022$\\u0022], [\\u002212\\u0022, 12], [\\u00220\\u0022, 0]], [[\\u0022DemFlag1\\u0022], [\\u0022Demographic Flag 1\\u0022], [\\u002210\\u0022, 10], [\\u0022char\\u0022], [\\u00221\\u0022, 1], [\\u00221\\u0022, 1], [\\u0022$\\u0022], [\\u00221\\u0022, 1], [\\u00220\\u0022, 0]], [[\\u0022DemFlag2\\u0022], [\\u0022Demographic Flag 2\\u0022], [\\u002211\\u0022, 11], [\\u0022char\\u0022], [\\u00221\\u0022, 1], [\\u00221\\u0022, 1], [\\u0022$\\u0022], [\\u00221\\u0022, 1], [\\u00220\\u0022, 0]], [[\\u0022DemFlag3\\u0022], [\\u0022Demographic Flag 3\\u0022], [\\u002212\\u0022, 12], [\\u0022char\\u0022], [\\u00221\\u0022, 1], [\\u00221\\u0022, 1], [\\u0022$\\u0022], [\\u00221\\u0022, 1], [\\u00220\\u0022, 0]], [[\\u0022DemFlag4\\u0022], [\\u0022Demographic Flag 4\\u0022], [\\u002213\\u0022, 13], [\\u0022char\\u0022], [\\u00221\\u0022, 1], [\\u00221\\u0022, 1], [\\u0022$\\u0022], [\\u00221\\u0022, 1], [\\u00220\\u0022, 0]], [[\\u0022DemFlag5\\u0022], [\\u0022Demographic Flag 5\\u0022], [\\u002214\\u0022, 14], [\\u0022char\\u0022], [\\u00221\\u0022, 1], [\\u00221\\u0022, 1], [\\u0022$\\u0022], [\\u00221\\u0022, 1], [\\u00220\\u0022, 0]], [[\\u0022DemFlag6\\u0022], [\\u0022Demographic Flag 6\\u0022], [\\u002215\\u0022, 15], [\\u0022char\\u0022], [\\u00221\\u0022, 1], [\\u00221\\u0022, 1], [\\u0022$\\u0022], [\\u00221\\u0022, 1], [\\u00220\\u0022, 0]], [[\\u0022DemFlag7\\u0022], [\\u0022Demographic Flag 7\\u0022], [\\u002216\\u0022, 16], [\\u0022char\\u0022], [\\u00221\\u0022, 1], [\\u00221\\u0022, 1], [\\u0022$\\u0022], [\\u00221\\u0022, 1], [\\u00220\\u0022, 0]], [[\\u0022DemFlag8\\u0022], [\\u0022Demographic Flag 8\\u0022], [\\u002217\\u0022, 17], [\\u0022char\\u0022], [\\u00221\\u0022, 1], [\\u00221\\u0022, 1], [\\u0022$\\u0022], [\\u00221\\u0022, 1], [\\u00220\\u0022, 0]], [[\\u0022PromClass\\u0022], [\\u0022Loyalty Card Class\\u0022], [\\u002218\\u0022, 18], [\\u0022char\\u0022], [\\u00228\\u0022, 8], [\\u00228\\u0022, 8], [\\u0022$\\u0022], [\\u00228\\u0022, 8], [\\u00220\\u0022, 0]], [[\\u0022PromTime\\u0022], [\\u0022Loyalty Card Tenure\\u0022], [\\u002219\\u0022, 19], [\\u0022double\\u0022], [\\u00228\\u0022, 8], [\\u002212\\u0022, 12], [\\u0022BEST\\u0022], [\\u002212\\u0022, 12], [\\u00220\\u0022, 0]], [[\\u0022TargetBuy\\u0022], [\\u0022Organics Purchase\\u0022], [\\u002220\\u0022, 20], [\\u0022char\\u0022], [\\u002210\\u0022, 10], [\\u002210\\u0022, 10], [\\u0022$\\u0022], [\\u002210\\u0022, 10], [\\u00220\\u0022, 0]], [[\\u0022Bought_Beverages\\u0022], [\\u0022Bought Beverages\\u0022], [\\u002221\\u0022, 21], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Bakery\\u0022], [\\u0022Bought Bakery\\u0022], [\\u002222\\u0022, 22], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Canned\\u0022], [\\u0022Bought Canned\\u0022], [\\u002223\\u0022, 23], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Dairy\\u0022], [\\u0022Bought Dairy\\u0022], [\\u002224\\u0022, 24], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Baking\\u0022], [\\u0022Bought Baking\\u0022], [\\u002225\\u0022, 25], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Frozen\\u0022], [\\u0022Bought Frozen\\u0022], [\\u002226\\u0022, 26], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Meat\\u0022], [\\u0022Bought Meat\\u0022], [\\u002227\\u0022, 27], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Fruits\\u0022], [\\u0022Bought Fruits\\u0022], [\\u002228\\u0022, 28], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Vegetables\\u0022], [\\u0022Bought Vegetables\\u0022], [\\u002229\\u0022, 29], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Cleaners\\u0022], [\\u0022Bought Cleaners\\u0022], [\\u002230\\u0022, 30], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_PaperGoods\\u0022], [\\u0022Bought PaperGoods\\u0022], [\\u002231\\u0022, 31], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Others\\u0022], [\\u0022Bought Others\\u0022], [\\u002232\\u0022, 32], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022purchase_3mon\\u0022], [\\u0022Recent 3 Month Purchase\\u0022], [\\u002233\\u0022, 33], [\\u0022double\\u0022], [\\u00228\\u0022, 8], [\\u002212\\u0022, 12], [\\u0022BEST\\u0022], [\\u002212\\u0022, 12], [\\u00220\\u0022, 0]], [[\\u0022purchase_6mon\\u0022], [\\u0022Recent 6 Month Purchase\\u0022], [\\u002234\\u0022, 34], [\\u0022double\\u0022], [\\u00228\\u0022, 8], [\\u002212\\u0022, 12], [\\u0022BEST\\u0022], [\\u002212\\u0022, 12], [\\u00220\\u0022, 0]], [[\\u0022purchase_9mon\\u0022], [\\u0022Recent 9 Month Purchase\\u0022], [\\u002235\\u0022, 35], [\\u0022double\\u0022], [\\u00228\\u0022, 8], [\\u002212\\u0022, 12], [\\u0022BEST\\u0022], [\\u002212\\u0022, 12], [\\u00220\\u0022, 0]], [[\\u0022purchase_12mon\\u0022], [\\u0022Recent 12 Month Purchase\\u0022], [\\u002236\\u0022, 36], [\\u0022double\\u0022], [\\u00228\\u0022, 8], [\\u002212\\u0022, 12], [\\u0022BEST\\u0022], [\\u002212\\u0022, 12], [\\u00220\\u0022, 0]]]}'));\n",
        "         });"
       ],
       "json": [
        "{\\u0022columns\\u0022: [{\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 0;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Column\\u0022, \\u0022targets\\u0022: 0}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 1;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Label\\u0022, \\u0022targets\\u0022: 1}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 2;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022ID\\u0022, \\u0022targets\\u0022: 2}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 3;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Type\\u0022, \\u0022targets\\u0022: 3}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 4;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022RawLength\\u0022, \\u0022targets\\u0022: 4}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 5;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022FormattedLength\\u0022, \\u0022targets\\u0022: 5}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 6;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Format\\u0022, \\u0022targets\\u0022: 6}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 7;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022NFL\\u0022, \\u0022targets\\u0022: 7}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 8;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022NFD\\u0022, \\u0022targets\\u0022: 8}], \\u0022label\\u0022: \\u0022Column Information for HPS.XIMENG.ORGANICS\\u0022, \\u0022data\\u0022: [[[\\u0022ID\\u0022], [\\u0022Customer ID\\u0022], [\\u00221\\u0022, 1], [\\u0022char\\u0022], [\\u002210\\u0022, 10], [\\u002210\\u0022, 10], [\\u0022$\\u0022], [\\u002210\\u0022, 10], [\\u00220\\u0022, 0]], [[\\u0022DemAffl\\u0022], [\\u0022Affluence Grade\\u0022], [\\u00222\\u0022, 2], [\\u0022double\\u0022], [\\u00228\\u0022, 8], [\\u002212\\u0022, 12], [\\u0022BEST\\u0022], [\\u002212\\u0022, 12], [\\u00220\\u0022, 0]], [[\\u0022DemAge\\u0022], [\\u0022Age\\u0022], [\\u00223\\u0022, 3], [\\u0022double\\u0022], [\\u00228\\u0022, 8], [\\u002212\\u0022, 12], [\\u0022BEST\\u0022], [\\u002212\\u0022, 12], [\\u00220\\u0022, 0]], [[\\u0022DemGender\\u0022], [\\u0022Gender\\u0022], [\\u00224\\u0022, 4], [\\u0022char\\u0022], [\\u00221\\u0022, 1], [\\u00221\\u0022, 1], [\\u0022$\\u0022], [\\u00221\\u0022, 1], [\\u00220\\u0022, 0]], [[\\u0022DemHomeowner\\u0022], [\\u0022Home Owner\\u0022], [\\u00225\\u0022, 5], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022DemAgeGroup\\u0022], [\\u0022Age Group\\u0022], [\\u00226\\u0022, 6], [\\u0022char\\u0022], [\\u002210\\u0022, 10], [\\u002210\\u0022, 10], [\\u0022$\\u0022], [\\u002210\\u0022, 10], [\\u00220\\u0022, 0]], [[\\u0022DemCluster\\u0022], [\\u0022Residential Neighborhood\\u0022], [\\u00227\\u0022, 7], [\\u0022char\\u0022], [\\u00222\\u0022, 2], [\\u00222\\u0022, 2], [\\u0022$\\u0022], [\\u00222\\u0022, 2], [\\u00220\\u0022, 0]], [[\\u0022DemReg\\u0022], [\\u0022Geographic Region\\u0022], [\\u00228\\u0022, 8], [\\u0022char\\u0022], [\\u002210\\u0022, 10], [\\u002210\\u0022, 10], [\\u0022$\\u0022], [\\u002210\\u0022, 10], [\\u00220\\u0022, 0]], [[\\u0022DemTVReg\\u0022], [\\u0022Television Region\\u0022], [\\u00229\\u0022, 9], [\\u0022char\\u0022], [\\u002212\\u0022, 12], [\\u002212\\u0022, 12], [\\u0022$\\u0022], [\\u002212\\u0022, 12], [\\u00220\\u0022, 0]], [[\\u0022DemFlag1\\u0022], [\\u0022Demographic Flag 1\\u0022], [\\u002210\\u0022, 10], [\\u0022char\\u0022], [\\u00221\\u0022, 1], [\\u00221\\u0022, 1], [\\u0022$\\u0022], [\\u00221\\u0022, 1], [\\u00220\\u0022, 0]], [[\\u0022DemFlag2\\u0022], [\\u0022Demographic Flag 2\\u0022], [\\u002211\\u0022, 11], [\\u0022char\\u0022], [\\u00221\\u0022, 1], [\\u00221\\u0022, 1], [\\u0022$\\u0022], [\\u00221\\u0022, 1], [\\u00220\\u0022, 0]], [[\\u0022DemFlag3\\u0022], [\\u0022Demographic Flag 3\\u0022], [\\u002212\\u0022, 12], [\\u0022char\\u0022], [\\u00221\\u0022, 1], [\\u00221\\u0022, 1], [\\u0022$\\u0022], [\\u00221\\u0022, 1], [\\u00220\\u0022, 0]], [[\\u0022DemFlag4\\u0022], [\\u0022Demographic Flag 4\\u0022], [\\u002213\\u0022, 13], [\\u0022char\\u0022], [\\u00221\\u0022, 1], [\\u00221\\u0022, 1], [\\u0022$\\u0022], [\\u00221\\u0022, 1], [\\u00220\\u0022, 0]], [[\\u0022DemFlag5\\u0022], [\\u0022Demographic Flag 5\\u0022], [\\u002214\\u0022, 14], [\\u0022char\\u0022], [\\u00221\\u0022, 1], [\\u00221\\u0022, 1], [\\u0022$\\u0022], [\\u00221\\u0022, 1], [\\u00220\\u0022, 0]], [[\\u0022DemFlag6\\u0022], [\\u0022Demographic Flag 6\\u0022], [\\u002215\\u0022, 15], [\\u0022char\\u0022], [\\u00221\\u0022, 1], [\\u00221\\u0022, 1], [\\u0022$\\u0022], [\\u00221\\u0022, 1], [\\u00220\\u0022, 0]], [[\\u0022DemFlag7\\u0022], [\\u0022Demographic Flag 7\\u0022], [\\u002216\\u0022, 16], [\\u0022char\\u0022], [\\u00221\\u0022, 1], [\\u00221\\u0022, 1], [\\u0022$\\u0022], [\\u00221\\u0022, 1], [\\u00220\\u0022, 0]], [[\\u0022DemFlag8\\u0022], [\\u0022Demographic Flag 8\\u0022], [\\u002217\\u0022, 17], [\\u0022char\\u0022], [\\u00221\\u0022, 1], [\\u00221\\u0022, 1], [\\u0022$\\u0022], [\\u00221\\u0022, 1], [\\u00220\\u0022, 0]], [[\\u0022PromClass\\u0022], [\\u0022Loyalty Card Class\\u0022], [\\u002218\\u0022, 18], [\\u0022char\\u0022], [\\u00228\\u0022, 8], [\\u00228\\u0022, 8], [\\u0022$\\u0022], [\\u00228\\u0022, 8], [\\u00220\\u0022, 0]], [[\\u0022PromTime\\u0022], [\\u0022Loyalty Card Tenure\\u0022], [\\u002219\\u0022, 19], [\\u0022double\\u0022], [\\u00228\\u0022, 8], [\\u002212\\u0022, 12], [\\u0022BEST\\u0022], [\\u002212\\u0022, 12], [\\u00220\\u0022, 0]], [[\\u0022TargetBuy\\u0022], [\\u0022Organics Purchase\\u0022], [\\u002220\\u0022, 20], [\\u0022char\\u0022], [\\u002210\\u0022, 10], [\\u002210\\u0022, 10], [\\u0022$\\u0022], [\\u002210\\u0022, 10], [\\u00220\\u0022, 0]], [[\\u0022Bought_Beverages\\u0022], [\\u0022Bought Beverages\\u0022], [\\u002221\\u0022, 21], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Bakery\\u0022], [\\u0022Bought Bakery\\u0022], [\\u002222\\u0022, 22], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Canned\\u0022], [\\u0022Bought Canned\\u0022], [\\u002223\\u0022, 23], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Dairy\\u0022], [\\u0022Bought Dairy\\u0022], [\\u002224\\u0022, 24], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Baking\\u0022], [\\u0022Bought Baking\\u0022], [\\u002225\\u0022, 25], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Frozen\\u0022], [\\u0022Bought Frozen\\u0022], [\\u002226\\u0022, 26], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Meat\\u0022], [\\u0022Bought Meat\\u0022], [\\u002227\\u0022, 27], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Fruits\\u0022], [\\u0022Bought Fruits\\u0022], [\\u002228\\u0022, 28], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Vegetables\\u0022], [\\u0022Bought Vegetables\\u0022], [\\u002229\\u0022, 29], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Cleaners\\u0022], [\\u0022Bought Cleaners\\u0022], [\\u002230\\u0022, 30], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_PaperGoods\\u0022], [\\u0022Bought PaperGoods\\u0022], [\\u002231\\u0022, 31], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022Bought_Others\\u0022], [\\u0022Bought Others\\u0022], [\\u002232\\u0022, 32], [\\u0022char\\u0022], [\\u00223\\u0022, 3], [\\u00223\\u0022, 3], [\\u0022$\\u0022], [\\u00223\\u0022, 3], [\\u00220\\u0022, 0]], [[\\u0022purchase_3mon\\u0022], [\\u0022Recent 3 Month Purchase\\u0022], [\\u002233\\u0022, 33], [\\u0022double\\u0022], [\\u00228\\u0022, 8], [\\u002212\\u0022, 12], [\\u0022BEST\\u0022], [\\u002212\\u0022, 12], [\\u00220\\u0022, 0]], [[\\u0022purchase_6mon\\u0022], [\\u0022Recent 6 Month Purchase\\u0022], [\\u002234\\u0022, 34], [\\u0022double\\u0022], [\\u00228\\u0022, 8], [\\u002212\\u0022, 12], [\\u0022BEST\\u0022], [\\u002212\\u0022, 12], [\\u00220\\u0022, 0]], [[\\u0022purchase_9mon\\u0022], [\\u0022Recent 9 Month Purchase\\u0022], [\\u002235\\u0022, 35], [\\u0022double\\u0022], [\\u00228\\u0022, 8], [\\u002212\\u0022, 12], [\\u0022BEST\\u0022], [\\u002212\\u0022, 12], [\\u00220\\u0022, 0]], [[\\u0022purchase_12mon\\u0022], [\\u0022Recent 12 Month Purchase\\u0022], [\\u002236\\u0022, 36], [\\u0022double\\u0022], [\\u00228\\u0022, 8], [\\u002212\\u0022, 12], [\\u0022BEST\\u0022], [\\u002212\\u0022, 12], [\\u00220\\u0022, 0]]]}"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "               Column                     Label  ID    Type  RawLength  \\\n",
        "0                  ID               Customer ID   1    char         10   \n",
        "1             DemAffl           Affluence Grade   2  double          8   \n",
        "2              DemAge                       Age   3  double          8   \n",
        "3           DemGender                    Gender   4    char          1   \n",
        "4        DemHomeowner                Home Owner   5    char          3   \n",
        "5         DemAgeGroup                 Age Group   6    char         10   \n",
        "6          DemCluster  Residential Neighborhood   7    char          2   \n",
        "7              DemReg         Geographic Region   8    char         10   \n",
        "8            DemTVReg         Television Region   9    char         12   \n",
        "9            DemFlag1        Demographic Flag 1  10    char          1   \n",
        "10           DemFlag2        Demographic Flag 2  11    char          1   \n",
        "11           DemFlag3        Demographic Flag 3  12    char          1   \n",
        "12           DemFlag4        Demographic Flag 4  13    char          1   \n",
        "13           DemFlag5        Demographic Flag 5  14    char          1   \n",
        "14           DemFlag6        Demographic Flag 6  15    char          1   \n",
        "15           DemFlag7        Demographic Flag 7  16    char          1   \n",
        "16           DemFlag8        Demographic Flag 8  17    char          1   \n",
        "17          PromClass        Loyalty Card Class  18    char          8   \n",
        "18           PromTime       Loyalty Card Tenure  19  double          8   \n",
        "19          TargetBuy         Organics Purchase  20    char         10   \n",
        "20   Bought_Beverages          Bought Beverages  21    char          3   \n",
        "21      Bought_Bakery             Bought Bakery  22    char          3   \n",
        "22      Bought_Canned             Bought Canned  23    char          3   \n",
        "23       Bought_Dairy              Bought Dairy  24    char          3   \n",
        "24      Bought_Baking             Bought Baking  25    char          3   \n",
        "25      Bought_Frozen             Bought Frozen  26    char          3   \n",
        "26        Bought_Meat               Bought Meat  27    char          3   \n",
        "27      Bought_Fruits             Bought Fruits  28    char          3   \n",
        "28  Bought_Vegetables         Bought Vegetables  29    char          3   \n",
        "29    Bought_Cleaners           Bought Cleaners  30    char          3   \n",
        "30  Bought_PaperGoods         Bought PaperGoods  31    char          3   \n",
        "31      Bought_Others             Bought Others  32    char          3   \n",
        "32      purchase_3mon   Recent 3 Month Purchase  33  double          8   \n",
        "33      purchase_6mon   Recent 6 Month Purchase  34  double          8   \n",
        "34      purchase_9mon   Recent 9 Month Purchase  35  double          8   \n",
        "35     purchase_12mon  Recent 12 Month Purchase  36  double          8   \n",
        "\n",
        "    FormattedLength Format  NFL  NFD  \n",
        "0                10      $   10    0  \n",
        "1                12   BEST   12    0  \n",
        "2                12   BEST   12    0  \n",
        "3                 1      $    1    0  \n",
        "4                 3      $    3    0  \n",
        "5                10      $   10    0  \n",
        "6                 2      $    2    0  \n",
        "7                10      $   10    0  \n",
        "8                12      $   12    0  \n",
        "9                 1      $    1    0  \n",
        "10                1      $    1    0  \n",
        "11                1      $    1    0  \n",
        "12                1      $    1    0  \n",
        "13                1      $    1    0  \n",
        "14                1      $    1    0  \n",
        "15                1      $    1    0  \n",
        "16                1      $    1    0  \n",
        "17                8      $    8    0  \n",
        "18               12   BEST   12    0  \n",
        "19               10      $   10    0  \n",
        "20                3      $    3    0  \n",
        "21                3      $    3    0  \n",
        "22                3      $    3    0  \n",
        "23                3      $    3    0  \n",
        "24                3      $    3    0  \n",
        "25                3      $    3    0  \n",
        "26                3      $    3    0  \n",
        "27                3      $    3    0  \n",
        "28                3      $    3    0  \n",
        "29                3      $    3    0  \n",
        "30                3      $    3    0  \n",
        "31                3      $    3    0  \n",
        "32               12   BEST   12    0  \n",
        "33               12   BEST   12    0  \n",
        "34               12   BEST   12    0  \n",
        "35               12   BEST   12    0  "
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Data Exploration"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "dat1.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div><table class=\"cas-results-key\"><tr><th>Summary</th></tr></table></div>\n",
        "<div class=\"cas-results-body\">\n",
        "<table class=\"cas-dataframe\">\n",
        "<thead>\n",
        "<tr><th colspan=\"10\">Descriptive Statistics for HPS.XIMENG.ORGANICS</th></tr>\n",
        "<tr>\n",
        "<th>Analysis Variable</th>\n",
        "<th>Min</th>\n",
        "<th>Max</th>\n",
        "<th>N</th>\n",
        "<th>Mean</th>\n",
        "<th>Sum</th>\n",
        "<th>Std</th>\n",
        "<th>StdErr</th>\n",
        "<th>CV</th>\n",
        "<th>NMiss</th>\n",
        "</tr>\n",
        "</thead>\n",
        "<tbody>\n",
        "<tr>\n",
        "<td>DemAffl</td>\n",
        "<td>0</td>\n",
        "<td>34</td>\n",
        "<td>1606488</td>\n",
        "<td>8.711893</td>\n",
        "<td>13995552</td>\n",
        "<td>3.421045</td>\n",
        "<td>0.002699</td>\n",
        "<td>39.26867</td>\n",
        "<td>82460</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>DemAge</td>\n",
        "<td>18</td>\n",
        "<td>79</td>\n",
        "<td>1574340</td>\n",
        "<td>53.79715</td>\n",
        "<td>84695008</td>\n",
        "<td>13.20573</td>\n",
        "<td>0.010525</td>\n",
        "<td>24.54727</td>\n",
        "<td>114608</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>PromTime</td>\n",
        "<td>0</td>\n",
        "<td>39</td>\n",
        "<td>1667592</td>\n",
        "<td>6.56467</td>\n",
        "<td>10947192</td>\n",
        "<td>4.657008</td>\n",
        "<td>0.003606</td>\n",
        "<td>70.94047</td>\n",
        "<td>21356</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>purchase_3mon</td>\n",
        "<td>698.44</td>\n",
        "<td>1188.06</td>\n",
        "<td>1688948</td>\n",
        "<td>950.0275</td>\n",
        "<td>1.6045E9</td>\n",
        "<td>50.06718</td>\n",
        "<td>0.038525</td>\n",
        "<td>5.270077</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>purchase_6mon</td>\n",
        "<td>1668.77</td>\n",
        "<td>2370.87</td>\n",
        "<td>1688948</td>\n",
        "<td>2049.979</td>\n",
        "<td>3.4623E9</td>\n",
        "<td>70.73101</td>\n",
        "<td>0.054425</td>\n",
        "<td>3.450328</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>purchase_9mon</td>\n",
        "<td>2624.09</td>\n",
        "<td>3468.72</td>\n",
        "<td>1688948</td>\n",
        "<td>3070.017</td>\n",
        "<td>5.1851E9</td>\n",
        "<td>86.58811</td>\n",
        "<td>0.066627</td>\n",
        "<td>2.820444</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>purchase_12mon</td>\n",
        "<td>3698.92</td>\n",
        "<td>4684.88</td>\n",
        "<td>1688948</td>\n",
        "<td>4189.995</td>\n",
        "<td>7.0767E9</td>\n",
        "<td>100.009</td>\n",
        "<td>0.076954</td>\n",
        "<td>2.386854</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "</tbody>\n",
        "</table>\n",
        "</div>\n",
        "<div class=\"cas-output-area\"></div>\n",
        "<table class=\"cas-results-performance\"><tr>\n",
        "<th>Elapsed</th><td>0.428s</td>\n",
        "<th>User</th><td>0.958s</td>\n",
        "<th>Sys</th><td>1.44s</td>\n",
        "<th>Mem</th><td>1.47e+03MB</td>\n",
        "</tr></table>"
       ],
       "javascript": [
        "\n",
        "   (function ($) {\n",
        "      var custom = $('link[rel=\"stylesheet\"][href^=\"/static/custom/custom.css\"]');\n",
        "      var head = $('head');\n",
        "      $.each([\"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/css/swat.css\", \"//cdn.datatables.net/1.10.3/css/jquery.dataTables.min.css\"], function (index, value) {\n",
        "         if ( $('link[rel=\"stylesheet\"][href=\"' + value + '\"]').length == 0 ) {\n",
        "            if ( custom.length > 0 ) {\n",
        "               custom.before($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            } else {\n",
        "               head.prepend($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            }\n",
        "         }\n",
        "      });\n",
        "   })($);\n",
        "\n",
        "   requirejs.config({enforceDefine:true});\n",
        "\n",
        "   require([\"datatables\", \"swat\"], function () {}, function (err) {\n",
        "      var ids = err.requireModules;\n",
        "      if ( ids && ids.length ) {\n",
        "         var configpaths = {\"datatables\": \"//cdn.datatables.net/1.10.3/js/jquery.dataTables.min\", \"swat\": \"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/js/swat\"};\n",
        "         for ( var i = 0; i < ids.length; i++ ) {\n",
        "            var id = ids[i];\n",
        "            var paths = {};\n",
        "            paths[id] = configpaths[id];\n",
        "            requirejs.undef(id);\n",
        "            requirejs.config({paths:paths});\n",
        "            require([id], function () {});\n",
        "         } \n",
        "      }\n",
        "   });\n",
        "   \n",
        "           require(['swat'], function (swat) {\n",
        "              new swat.CASResults(element, JSON.parse('{\\u0022messages\\u0022: [], \\u0022session\\u0022: \\u0022B9DC4635-FD3B-4109-9374-135012147C8D\\u0022, \\u0022disposition\\u0022: {\\u0022reason\\u0022: 0, \\u0022severity\\u0022: 0, \\u0022debug\\u0022: null, \\u0022status\\u0022: null}, \\u0022signature\\u0022: {\\u0022params\\u0022: {\\u0022orderbydesc\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022groupbylimit\\u0022: {\\u0022type\\u0022: \\u0022int64\\u0022}, \\u0022table.orderby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isOrderBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022casout\\u0022: {\\u0022parmListTag\\u0022: \\u0022casouttable\\u0022, \\u0022isOutTableDef\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022orderbyformat\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.name\\u0022: {\\u0022default\\u0022: \\u0022HPS.XIMENG.ORGANICS\\u0022, \\u0022isTableName\\u0022: 1, \\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.groupbyfmts\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022casout.compress\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022casout.blocksize\\u0022: {\\u0022type\\u0022: \\u0022int64\\u0022, \\u0022hasInclMin\\u0022: 1, \\u0022valueMin\\u0022: 0}, \\u0022table.caslib\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.comppgm\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022multitable\\u0022: {\\u0022default\\u0022: 1, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.groupbymode\\u0022: {\\u0022default\\u0022: \\u0022NOSORT\\u0022, \\u0022allowedValues\\u0022: [\\u0022NOSORT\\u0022, \\u0022REDISTRIBUTE\\u0022], \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table\\u0022: {\\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022, \\u0022parmListTag\\u0022: \\u0022castable\\u0022, \\u0022isTableDef\\u0022: 1}, \\u0022table.compondemand\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.varlist\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022repeat\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.compvars\\u0022: {\\u0022isCompVar\\u0022: 1, \\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022limit\\u0022: {\\u0022hasInclMin\\u0022: 1, \\u0022hasInclMax\\u0022: 1, \\u0022valueMin\\u0022: 0, \\u0022type\\u0022: \\u0022int32\\u0022, \\u0022default\\u0022: 0, \\u0022valueMax\\u0022: 2147483647}, \\u0022table.groupby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isGroupBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022casout.replication\\u0022: {\\u0022default\\u0022: 1, \\u0022type\\u0022: \\u0022int32\\u0022, \\u0022hasInclMin\\u0022: 1, \\u0022valueMin\\u0022: 0}, \\u0022casout.caslib\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022casout.name\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022isTableName\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022orderbyagg\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022table.where\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022isWhere\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022casout.replace\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022casout.timestamp\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}}, \\u0022label\\u0022: \\u0022Summary\\u0022, \\u0022desc\\u0022: \\u0022Descriptive statistics\\u0022, \\u0022name\\u0022: \\u0022tkimstat.summary\\u0022}, \\u0022performance\\u0022: {\\u0022systemCores\\u0022: 4608, \\u0022elapsedTime\\u0022: 0.42807100000000003, \\u0022cpuSystemTime\\u0022: 1.4407739999999998, \\u0022systemTotalMemory\\u0022: 38966284091392, \\u0022memory\\u0022: 1538752544, \\u0022memorySystem\\u0022: 2836127840, \\u0022cpuUserTime\\u0022: 0.9578519999999999, \\u0022memoryOS\\u0022: 1740251136, \\u0022systemNodes\\u0022: 144, \\u0022memoryQuota\\u0022: 1740251136}}'), function (element) {\n",
        "                 \n",
        "   (function ($) {\n",
        "      var custom = $('link[rel=\"stylesheet\"][href^=\"/static/custom/custom.css\"]');\n",
        "      var head = $('head');\n",
        "      $.each([\"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/css/swat.css\", \"//cdn.datatables.net/1.10.3/css/jquery.dataTables.min.css\"], function (index, value) {\n",
        "         if ( $('link[rel=\"stylesheet\"][href=\"' + value + '\"]').length == 0 ) {\n",
        "            if ( custom.length > 0 ) {\n",
        "               custom.before($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            } else {\n",
        "               head.prepend($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            }\n",
        "         }\n",
        "      });\n",
        "   })($);\n",
        "\n",
        "   requirejs.config({enforceDefine:true});\n",
        "\n",
        "   require([\"datatables\", \"swat\"], function () {}, function (err) {\n",
        "      var ids = err.requireModules;\n",
        "      if ( ids && ids.length ) {\n",
        "         var configpaths = {\"datatables\": \"//cdn.datatables.net/1.10.3/js/jquery.dataTables.min\", \"swat\": \"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/js/swat\"};\n",
        "         for ( var i = 0; i < ids.length; i++ ) {\n",
        "            var id = ids[i];\n",
        "            var paths = {};\n",
        "            paths[id] = configpaths[id];\n",
        "            requirejs.undef(id);\n",
        "            requirejs.config({paths:paths});\n",
        "            require([id], function () {});\n",
        "         } \n",
        "      }\n",
        "   });\n",
        "   \n",
        "         require(['swat'], function (swat) {\n",
        "            new swat.CASDataFrame(element, JSON.parse('{\\u0022columns\\u0022: [{\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 0;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Analysis Variable\\u0022, \\u0022targets\\u0022: 0}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 1;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Min\\u0022, \\u0022targets\\u0022: 1}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 2;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Max\\u0022, \\u0022targets\\u0022: 2}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 3;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022N\\u0022, \\u0022targets\\u0022: 3}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 4;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Mean\\u0022, \\u0022targets\\u0022: 4}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 5;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Sum\\u0022, \\u0022targets\\u0022: 5}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 6;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Std\\u0022, \\u0022targets\\u0022: 6}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 7;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022StdErr\\u0022, \\u0022targets\\u0022: 7}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 8;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022CV\\u0022, \\u0022targets\\u0022: 8}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 9;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022NMiss\\u0022, \\u0022targets\\u0022: 9}], \\u0022label\\u0022: \\u0022Descriptive Statistics for HPS.XIMENG.ORGANICS\\u0022, \\u0022data\\u0022: [[[\\u0022DemAffl\\u0022], [\\u00220\\u0022, 0.0], [\\u002234\\u0022, 34.0], [\\u00221606488\\u0022, 1606488.0], [\\u00228.711893\\u0022, 8.711893272778882], [\\u002213995552\\u0022, 13995552.0], [\\u00223.421045\\u0022, 3.421044775601295], [\\u00220.002699\\u0022, 0.002699106465186646], [\\u002239.26867\\u0022, 39.268671785622836], [\\u002282460\\u0022, 82460.0]], [[\\u0022DemAge\\u0022], [\\u002218\\u0022, 18.0], [\\u002279\\u0022, 79.0], [\\u00221574340\\u0022, 1574340.0], [\\u002253.79715\\u0022, 53.797151822350955], [\\u002284695008\\u0022, 84695008.0], [\\u002213.20573\\u0022, 13.205733741395221], [\\u00220.010525\\u0022, 0.010524785940958827], [\\u002224.54727\\u0022, 24.54727303222895], [\\u0022114608\\u0022, 114608.0]], [[\\u0022PromTime\\u0022], [\\u00220\\u0022, 0.0], [\\u002239\\u0022, 39.0], [\\u00221667592\\u0022, 1667592.0], [\\u00226.56467\\u0022, 6.5646704949412085], [\\u002210947192\\u0022, 10947192.0], [\\u00224.657008\\u0022, 4.657007944368757], [\\u00220.003606\\u0022, 0.0036063018718549638], [\\u002270.94047\\u0022, 70.94046758260734], [\\u002221356\\u0022, 21356.0]], [[\\u0022purchase_3mon\\u0022], [\\u0022698.44\\u0022, 698.44], [\\u00221188.06\\u0022, 1188.06], [\\u00221688948\\u0022, 1688948.0], [\\u0022950.0275\\u0022, 950.027539201917], [\\u00221.6045E9\\u0022, 1604547112.2799993], [\\u002250.06718\\u0022, 50.06717924996445], [\\u00220.038525\\u0022, 0.038525207360093176], [\\u00225.270077\\u0022, 5.270076622412866], [\\u00220\\u0022, 0.0]], [[\\u0022purchase_6mon\\u0022], [\\u00221668.77\\u0022, 1668.77], [\\u00222370.87\\u0022, 2370.87], [\\u00221688948\\u0022, 1688948.0], [\\u00222049.979\\u0022, 2049.979249994672], [\\u00223.4623E9\\u0022, 3462308354.3200016], [\\u002270.73101\\u0022, 70.73101025988822], [\\u00220.054425\\u0022, 0.054425411574449876], [\\u00223.450328\\u0022, 3.4503281074709444], [\\u00220\\u0022, 0.0]], [[\\u0022purchase_9mon\\u0022], [\\u00222624.09\\u0022, 2624.09], [\\u00223468.72\\u0022, 3468.7200000000003], [\\u00221688948\\u0022, 1688948.0], [\\u00223070.017\\u0022, 3070.0167846020117], [\\u00225.1851E9\\u0022, 5185098708.319999], [\\u002286.58811\\u0022, 86.58811494970325], [\\u00220.066627\\u0022, 0.066626982652698], [\\u00222.820444\\u0022, 2.820444350141502], [\\u00220\\u0022, 0.0]], [[\\u0022purchase_12mon\\u0022], [\\u00223698.92\\u0022, 3698.9199999999996], [\\u00224684.88\\u0022, 4684.879999999999], [\\u00221688948\\u0022, 1688948.0], [\\u00224189.995\\u0022, 4189.994797578138], [\\u00227.0767E9\\u0022, 7076683333.380001], [\\u0022100.009\\u0022, 100.0090423163914], [\\u00220.076954\\u0022, 0.07695398763903896], [\\u00222.386854\\u0022, 2.386853615527105], [\\u00220\\u0022, 0.0]]]}'));\n",
        "         });\n",
        "              });\n",
        "           });"
       ],
       "json": [
        "{\\u0022messages\\u0022: [], \\u0022session\\u0022: \\u0022B9DC4635-FD3B-4109-9374-135012147C8D\\u0022, \\u0022disposition\\u0022: {\\u0022reason\\u0022: 0, \\u0022severity\\u0022: 0, \\u0022debug\\u0022: null, \\u0022status\\u0022: null}, \\u0022signature\\u0022: {\\u0022params\\u0022: {\\u0022orderbydesc\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022groupbylimit\\u0022: {\\u0022type\\u0022: \\u0022int64\\u0022}, \\u0022table.orderby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isOrderBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022casout\\u0022: {\\u0022parmListTag\\u0022: \\u0022casouttable\\u0022, \\u0022isOutTableDef\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022orderbyformat\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.name\\u0022: {\\u0022default\\u0022: \\u0022HPS.XIMENG.ORGANICS\\u0022, \\u0022isTableName\\u0022: 1, \\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.groupbyfmts\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022casout.compress\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022casout.blocksize\\u0022: {\\u0022type\\u0022: \\u0022int64\\u0022, \\u0022hasInclMin\\u0022: 1, \\u0022valueMin\\u0022: 0}, \\u0022table.caslib\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.comppgm\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022multitable\\u0022: {\\u0022default\\u0022: 1, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.groupbymode\\u0022: {\\u0022default\\u0022: \\u0022NOSORT\\u0022, \\u0022allowedValues\\u0022: [\\u0022NOSORT\\u0022, \\u0022REDISTRIBUTE\\u0022], \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table\\u0022: {\\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022, \\u0022parmListTag\\u0022: \\u0022castable\\u0022, \\u0022isTableDef\\u0022: 1}, \\u0022table.compondemand\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.varlist\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022repeat\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.compvars\\u0022: {\\u0022isCompVar\\u0022: 1, \\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022limit\\u0022: {\\u0022hasInclMin\\u0022: 1, \\u0022hasInclMax\\u0022: 1, \\u0022valueMin\\u0022: 0, \\u0022type\\u0022: \\u0022int32\\u0022, \\u0022default\\u0022: 0, \\u0022valueMax\\u0022: 2147483647}, \\u0022table.groupby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isGroupBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022casout.replication\\u0022: {\\u0022default\\u0022: 1, \\u0022type\\u0022: \\u0022int32\\u0022, \\u0022hasInclMin\\u0022: 1, \\u0022valueMin\\u0022: 0}, \\u0022casout.caslib\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022casout.name\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022isTableName\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022orderbyagg\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022table.where\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022isWhere\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022casout.replace\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022casout.timestamp\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}}, \\u0022label\\u0022: \\u0022Summary\\u0022, \\u0022desc\\u0022: \\u0022Descriptive statistics\\u0022, \\u0022name\\u0022: \\u0022tkimstat.summary\\u0022}, \\u0022performance\\u0022: {\\u0022systemCores\\u0022: 4608, \\u0022elapsedTime\\u0022: 0.42807100000000003, \\u0022cpuSystemTime\\u0022: 1.4407739999999998, \\u0022systemTotalMemory\\u0022: 38966284091392, \\u0022memory\\u0022: 1538752544, \\u0022memorySystem\\u0022: 2836127840, \\u0022cpuUserTime\\u0022: 0.9578519999999999, \\u0022memoryOS\\u0022: 1740251136, \\u0022systemNodes\\u0022: 144, \\u0022memoryQuota\\u0022: 1740251136}}"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "CASResults([('Summary',            Column      Min      Max        N         Mean           Sum  \\\n",
        "0         DemAffl     0.00    34.00  1606488     8.711893  1.399555e+07   \n",
        "1          DemAge    18.00    79.00  1574340    53.797152  8.469501e+07   \n",
        "2        PromTime     0.00    39.00  1667592     6.564670  1.094719e+07   \n",
        "3   purchase_3mon   698.44  1188.06  1688948   950.027539  1.604547e+09   \n",
        "4   purchase_6mon  1668.77  2370.87  1688948  2049.979250  3.462308e+09   \n",
        "5   purchase_9mon  2624.09  3468.72  1688948  3070.016785  5.185099e+09   \n",
        "6  purchase_12mon  3698.92  4684.88  1688948  4189.994798  7.076683e+09   \n",
        "\n",
        "          Std    StdErr         CV   NMiss  \n",
        "0    3.421045  0.002699  39.268672   82460  \n",
        "1   13.205734  0.010525  24.547273  114608  \n",
        "2    4.657008  0.003606  70.940468   21356  \n",
        "3   50.067179  0.038525   5.270077       0  \n",
        "4   70.731010  0.054425   3.450328       0  \n",
        "5   86.588115  0.066627   2.820444       0  \n",
        "6  100.009042  0.076954   2.386854       0  )])"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "* Filter the data frame output from COLUMNINFO to obtain a list of numeric variables"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "numList = out[ out['Type'] == 'double']['Column'].tolist()\n",
      "numList"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "['DemAffl',\n",
        " 'DemAge',\n",
        " 'PromTime',\n",
        " 'purchase_3mon',\n",
        " 'purchase_6mon',\n",
        " 'purchase_9mon',\n",
        " 'purchase_12mon']"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "* Set the VARLIST parameter for DAT1\n",
      "* Fetch all numeric variables and the respones variable"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "dat1.setParams(varlist = ['TargetBuy'] + numList )\n",
      "\n",
      "dat1.fetch(maxrows=10)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "C:\\Anaconda3\\lib\\site-packages\\IPython\\core\\formatters.py:239: FormatterWarning: Exception in application/json formatter: Out of range float values are not JSON compliant\n",
        "  FormatterWarning,\n",
        "C:\\Anaconda3\\lib\\site-packages\\IPython\\core\\formatters.py:239: FormatterWarning: Exception in application/javascript formatter: Out of range float values are not JSON compliant\n",
        "  FormatterWarning,\n"
       ]
      },
      {
       "html": [
        "<table class=\"cas-dataframe\">\n",
        "<thead>\n",
        "<tr><th colspan=\"9\">Selected Rows from Table HPS.XIMENG.ORGANICS</th></tr>\n",
        "<tr>\n",
        "<th>_Index_</th>\n",
        "<th>TargetBuy</th>\n",
        "<th>DemAffl</th>\n",
        "<th>DemAge</th>\n",
        "<th>PromTime</th>\n",
        "<th>purchase_3mon</th>\n",
        "<th>purchase_6mon</th>\n",
        "<th>purchase_9mon</th>\n",
        "<th>purchase_12mon</th>\n",
        "</tr>\n",
        "</thead>\n",
        "<tbody>\n",
        "<tr>\n",
        "<td>1</td>\n",
        "<td>No</td>\n",
        "<td>8</td>\n",
        "<td>51</td>\n",
        "<td>3</td>\n",
        "<td>910.02</td>\n",
        "<td>2026.27</td>\n",
        "<td>2964.23</td>\n",
        "<td>4140.91</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>2</td>\n",
        "<td>No</td>\n",
        "<td>4</td>\n",
        "<td>64</td>\n",
        "<td>1</td>\n",
        "<td>956.22</td>\n",
        "<td>2085.96</td>\n",
        "<td>3196.61</td>\n",
        "<td>4342.78</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>3</td>\n",
        "<td>No</td>\n",
        "<td>6</td>\n",
        "<td>63</td>\n",
        "<td>4</td>\n",
        "<td>987.92</td>\n",
        "<td>2075.7</td>\n",
        "<td>3081.97</td>\n",
        "<td>4168.03</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>4</td>\n",
        "<td>No</td>\n",
        "<td>9</td>\n",
        "<td>54</td>\n",
        "<td>1</td>\n",
        "<td>1017.95</td>\n",
        "<td>2098.26</td>\n",
        "<td>3198.94</td>\n",
        "<td>4344.34</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>5</td>\n",
        "<td>No</td>\n",
        "<td>nan</td>\n",
        "<td>72</td>\n",
        "<td>5</td>\n",
        "<td>996.6</td>\n",
        "<td>2202.52</td>\n",
        "<td>3299.95</td>\n",
        "<td>4371.81</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>6</td>\n",
        "<td>No</td>\n",
        "<td>8</td>\n",
        "<td>45</td>\n",
        "<td>5</td>\n",
        "<td>992.53</td>\n",
        "<td>2065.69</td>\n",
        "<td>3088.84</td>\n",
        "<td>4339.33</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>7</td>\n",
        "<td>No</td>\n",
        "<td>13</td>\n",
        "<td>28</td>\n",
        "<td>2</td>\n",
        "<td>1012.79</td>\n",
        "<td>2065.51</td>\n",
        "<td>3100.04</td>\n",
        "<td>4233.64</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>8</td>\n",
        "<td>Bought</td>\n",
        "<td>6</td>\n",
        "<td>47</td>\n",
        "<td>10</td>\n",
        "<td>993.78</td>\n",
        "<td>2116.18</td>\n",
        "<td>3091.98</td>\n",
        "<td>4196.72</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>9</td>\n",
        "<td>No</td>\n",
        "<td>8</td>\n",
        "<td>69</td>\n",
        "<td>8</td>\n",
        "<td>938.76</td>\n",
        "<td>2022.16</td>\n",
        "<td>3058.72</td>\n",
        "<td>4196.9</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>10</td>\n",
        "<td>No</td>\n",
        "<td>3</td>\n",
        "<td>53</td>\n",
        "<td>8</td>\n",
        "<td>915.24</td>\n",
        "<td>2056.53</td>\n",
        "<td>3069.63</td>\n",
        "<td>4156.24</td>\n",
        "</tr>\n",
        "</tbody>\n",
        "</table>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "   _Index_ TargetBuy  DemAffl  DemAge  PromTime  purchase_3mon  purchase_6mon  \\\n",
        "0        1        No        8      51         3         910.02        2026.27   \n",
        "1        2        No        4      64         1         956.22        2085.96   \n",
        "2        3        No        6      63         4         987.92        2075.70   \n",
        "3        4        No        9      54         1        1017.95        2098.26   \n",
        "4        5        No      NaN      72         5         996.60        2202.52   \n",
        "5        6        No        8      45         5         992.53        2065.69   \n",
        "6        7        No       13      28         2        1012.79        2065.51   \n",
        "7        8    Bought        6      47        10         993.78        2116.18   \n",
        "8        9        No        8      69         8         938.76        2022.16   \n",
        "9       10        No        3      53         8         915.24        2056.53   \n",
        "\n",
        "   purchase_9mon  purchase_12mon  \n",
        "0        2964.23         4140.91  \n",
        "1        3196.61         4342.78  \n",
        "2        3081.97         4168.03  \n",
        "3        3198.94         4344.34  \n",
        "4        3299.95         4371.81  \n",
        "5        3088.84         4339.33  \n",
        "6        3100.04         4233.64  \n",
        "7        3091.98         4196.72  \n",
        "8        3058.72         4196.90  \n",
        "9        3069.63         4156.24  "
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "dat1.tkimstat.crosstab(row='TargetBuy', col='DemGender')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div><table class=\"cas-results-key\"><tr><th>Crosstab</th></tr></table></div>\n",
        "<div class=\"cas-results-body\">\n",
        "<table class=\"cas-dataframe\">\n",
        "<thead>\n",
        "<tr><th colspan=\"4\">Crosstabulation of TargetBuy by DemGender for HPS.XIMENG.ORGANICS.</th></tr>\n",
        "<tr>\n",
        "<th>TargetBuy</th>\n",
        "<th>F</th>\n",
        "<th>M</th>\n",
        "<th>U</th>\n",
        "</tr>\n",
        "</thead>\n",
        "<tbody>\n",
        "<tr>\n",
        "<td>Bought</td>\n",
        "<td>319580</td>\n",
        "<td>73416</td>\n",
        "<td>25384</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>No</td>\n",
        "<td>603744</td>\n",
        "<td>368524</td>\n",
        "<td>298300</td>\n",
        "</tr>\n",
        "</tbody>\n",
        "</table>\n",
        "</div>\n",
        "<div class=\"cas-output-area\"></div>\n",
        "<table class=\"cas-results-performance\"><tr>\n",
        "<th>Elapsed</th><td>0.358s</td>\n",
        "<th>User</th><td>1.56s</td>\n",
        "<th>Sys</th><td>1.45s</td>\n",
        "<th>Mem</th><td>1.19e+03MB</td>\n",
        "</tr></table>"
       ],
       "javascript": [
        "\n",
        "   (function ($) {\n",
        "      var custom = $('link[rel=\"stylesheet\"][href^=\"/static/custom/custom.css\"]');\n",
        "      var head = $('head');\n",
        "      $.each([\"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/css/swat.css\", \"//cdn.datatables.net/1.10.3/css/jquery.dataTables.min.css\"], function (index, value) {\n",
        "         if ( $('link[rel=\"stylesheet\"][href=\"' + value + '\"]').length == 0 ) {\n",
        "            if ( custom.length > 0 ) {\n",
        "               custom.before($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            } else {\n",
        "               head.prepend($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            }\n",
        "         }\n",
        "      });\n",
        "   })($);\n",
        "\n",
        "   requirejs.config({enforceDefine:true});\n",
        "\n",
        "   require([\"datatables\", \"swat\"], function () {}, function (err) {\n",
        "      var ids = err.requireModules;\n",
        "      if ( ids && ids.length ) {\n",
        "         var configpaths = {\"datatables\": \"//cdn.datatables.net/1.10.3/js/jquery.dataTables.min\", \"swat\": \"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/js/swat\"};\n",
        "         for ( var i = 0; i < ids.length; i++ ) {\n",
        "            var id = ids[i];\n",
        "            var paths = {};\n",
        "            paths[id] = configpaths[id];\n",
        "            requirejs.undef(id);\n",
        "            requirejs.config({paths:paths});\n",
        "            require([id], function () {});\n",
        "         } \n",
        "      }\n",
        "   });\n",
        "   \n",
        "           require(['swat'], function (swat) {\n",
        "              new swat.CASResults(element, JSON.parse('{\\u0022messages\\u0022: [], \\u0022session\\u0022: \\u0022B9DC4635-FD3B-4109-9374-135012147C8D\\u0022, \\u0022disposition\\u0022: {\\u0022reason\\u0022: 0, \\u0022severity\\u0022: 0, \\u0022debug\\u0022: null, \\u0022status\\u0022: null}, \\u0022signature\\u0022: {\\u0022params\\u0022: {\\u0022groupbylimit\\u0022: {\\u0022type\\u0022: \\u0022int64\\u0022}, \\u0022table.orderby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isOrderBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022colnbins\\u0022: {\\u0022hasInclMin\\u0022: 1, \\u0022hasInclMax\\u0022: 1, \\u0022valueMin\\u0022: 0, \\u0022type\\u0022: \\u0022int32\\u0022, \\u0022default\\u0022: 0, \\u0022valueMax\\u0022: 2147483647}, \\u0022table.name\\u0022: {\\u0022default\\u0022: \\u0022HPS.XIMENG.ORGANICS\\u0022, \\u0022isTableName\\u0022: 1, \\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.groupbyfmts\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022raworder\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022row\\u0022: {\\u0022default\\u0022: \\u0022TargetBuy\\u0022, \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022colformat\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022col\\u0022: {\\u0022default\\u0022: \\u0022DemGender\\u0022, \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.caslib\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.comppgm\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022chisq\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.groupbymode\\u0022: {\\u0022default\\u0022: \\u0022NOSORT\\u0022, \\u0022allowedValues\\u0022: [\\u0022NOSORT\\u0022, \\u0022REDISTRIBUTE\\u0022], \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table\\u0022: {\\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022, \\u0022parmListTag\\u0022: \\u0022castable\\u0022, \\u0022isTableDef\\u0022: 1}, \\u0022descending\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.compondemand\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.varlist\\u0022: {\\u0022default\\u0022: [\\u0022TargetBuy\\u0022, \\u0022DemAffl\\u0022, \\u0022DemAge\\u0022, \\u0022PromTime\\u0022, \\u0022purchase_3mon\\u0022, \\u0022purchase_6mon\\u0022, \\u0022purchase_9mon\\u0022, \\u0022purchase_12mon\\u0022], \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022nonice\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022rowformat\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.compvars\\u0022: {\\u0022isCompVar\\u0022: 1, \\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022association\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.groupby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isGroupBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022includemissing\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022weight\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022acrossby\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022rownbins\\u0022: {\\u0022hasInclMin\\u0022: 1, \\u0022hasInclMax\\u0022: 1, \\u0022valueMin\\u0022: 0, \\u0022type\\u0022: \\u0022int32\\u0022, \\u0022default\\u0022: 0, \\u0022valueMax\\u0022: 2147483647}, \\u0022aggregators\\u0022: {\\u0022allowedValues\\u0022: [\\u0022CSS\\u0022, \\u0022CV\\u0022, \\u0022MAX\\u0022, \\u0022MEAN\\u0022, \\u0022MIN\\u0022, \\u0022N\\u0022, \\u0022NMISS\\u0022, \\u0022PROBT\\u0022, \\u0022STD\\u0022, \\u0022STDERR\\u0022, \\u0022SUM\\u0022, \\u0022TSTAT\\u0022, \\u0022USS\\u0022, \\u0022VAR\\u0022], \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.where\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022isWhere\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022margins\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022fulltable\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}}, \\u0022label\\u0022: \\u0022Tabulation\\u0022, \\u0022desc\\u0022: \\u0022One-way or two-way tabulations\\u0022, \\u0022name\\u0022: \\u0022tkimstat.crosstab\\u0022}, \\u0022performance\\u0022: {\\u0022systemCores\\u0022: 4608, \\u0022elapsedTime\\u0022: 0.35789, \\u0022cpuSystemTime\\u0022: 1.4497840000000002, \\u0022systemTotalMemory\\u0022: 38966284091392, \\u0022memory\\u0022: 1250571328, \\u0022memorySystem\\u0022: 2866491680, \\u0022cpuUserTime\\u0022: 1.560777, \\u0022memoryOS\\u0022: 1745231872, \\u0022systemNodes\\u0022: 144, \\u0022memoryQuota\\u0022: 1760436224}}'), function (element) {\n",
        "                 \n",
        "   (function ($) {\n",
        "      var custom = $('link[rel=\"stylesheet\"][href^=\"/static/custom/custom.css\"]');\n",
        "      var head = $('head');\n",
        "      $.each([\"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/css/swat.css\", \"//cdn.datatables.net/1.10.3/css/jquery.dataTables.min.css\"], function (index, value) {\n",
        "         if ( $('link[rel=\"stylesheet\"][href=\"' + value + '\"]').length == 0 ) {\n",
        "            if ( custom.length > 0 ) {\n",
        "               custom.before($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            } else {\n",
        "               head.prepend($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            }\n",
        "         }\n",
        "      });\n",
        "   })($);\n",
        "\n",
        "   requirejs.config({enforceDefine:true});\n",
        "\n",
        "   require([\"datatables\", \"swat\"], function () {}, function (err) {\n",
        "      var ids = err.requireModules;\n",
        "      if ( ids && ids.length ) {\n",
        "         var configpaths = {\"datatables\": \"//cdn.datatables.net/1.10.3/js/jquery.dataTables.min\", \"swat\": \"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/js/swat\"};\n",
        "         for ( var i = 0; i < ids.length; i++ ) {\n",
        "            var id = ids[i];\n",
        "            var paths = {};\n",
        "            paths[id] = configpaths[id];\n",
        "            requirejs.undef(id);\n",
        "            requirejs.config({paths:paths});\n",
        "            require([id], function () {});\n",
        "         } \n",
        "      }\n",
        "   });\n",
        "   \n",
        "         require(['swat'], function (swat) {\n",
        "            new swat.CASDataFrame(element, JSON.parse('{\\u0022columns\\u0022: [{\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 0;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022TargetBuy\\u0022, \\u0022targets\\u0022: 0}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 1;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022F\\u0022, \\u0022targets\\u0022: 1}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 2;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022M\\u0022, \\u0022targets\\u0022: 2}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 3;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022U\\u0022, \\u0022targets\\u0022: 3}], \\u0022label\\u0022: \\u0022Crosstabulation of TargetBuy by DemGender for HPS.XIMENG.ORGANICS.\\u0022, \\u0022data\\u0022: [[[\\u0022Bought\\u0022], [\\u0022319580\\u0022, 319580.0], [\\u002273416\\u0022, 73416.0], [\\u002225384\\u0022, 25384.0]], [[\\u0022No\\u0022], [\\u0022603744\\u0022, 603744.0], [\\u0022368524\\u0022, 368524.0], [\\u0022298300\\u0022, 298300.0]]]}'));\n",
        "         });\n",
        "              });\n",
        "           });"
       ],
       "json": [
        "{\\u0022messages\\u0022: [], \\u0022session\\u0022: \\u0022B9DC4635-FD3B-4109-9374-135012147C8D\\u0022, \\u0022disposition\\u0022: {\\u0022reason\\u0022: 0, \\u0022severity\\u0022: 0, \\u0022debug\\u0022: null, \\u0022status\\u0022: null}, \\u0022signature\\u0022: {\\u0022params\\u0022: {\\u0022groupbylimit\\u0022: {\\u0022type\\u0022: \\u0022int64\\u0022}, \\u0022table.orderby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isOrderBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022colnbins\\u0022: {\\u0022hasInclMin\\u0022: 1, \\u0022hasInclMax\\u0022: 1, \\u0022valueMin\\u0022: 0, \\u0022type\\u0022: \\u0022int32\\u0022, \\u0022default\\u0022: 0, \\u0022valueMax\\u0022: 2147483647}, \\u0022table.name\\u0022: {\\u0022default\\u0022: \\u0022HPS.XIMENG.ORGANICS\\u0022, \\u0022isTableName\\u0022: 1, \\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.groupbyfmts\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022raworder\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022row\\u0022: {\\u0022default\\u0022: \\u0022TargetBuy\\u0022, \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022colformat\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022col\\u0022: {\\u0022default\\u0022: \\u0022DemGender\\u0022, \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.caslib\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.comppgm\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022chisq\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.groupbymode\\u0022: {\\u0022default\\u0022: \\u0022NOSORT\\u0022, \\u0022allowedValues\\u0022: [\\u0022NOSORT\\u0022, \\u0022REDISTRIBUTE\\u0022], \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table\\u0022: {\\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022, \\u0022parmListTag\\u0022: \\u0022castable\\u0022, \\u0022isTableDef\\u0022: 1}, \\u0022descending\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.compondemand\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.varlist\\u0022: {\\u0022default\\u0022: [\\u0022TargetBuy\\u0022, \\u0022DemAffl\\u0022, \\u0022DemAge\\u0022, \\u0022PromTime\\u0022, \\u0022purchase_3mon\\u0022, \\u0022purchase_6mon\\u0022, \\u0022purchase_9mon\\u0022, \\u0022purchase_12mon\\u0022], \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022nonice\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022rowformat\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.compvars\\u0022: {\\u0022isCompVar\\u0022: 1, \\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022association\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.groupby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isGroupBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022includemissing\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022weight\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022acrossby\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022rownbins\\u0022: {\\u0022hasInclMin\\u0022: 1, \\u0022hasInclMax\\u0022: 1, \\u0022valueMin\\u0022: 0, \\u0022type\\u0022: \\u0022int32\\u0022, \\u0022default\\u0022: 0, \\u0022valueMax\\u0022: 2147483647}, \\u0022aggregators\\u0022: {\\u0022allowedValues\\u0022: [\\u0022CSS\\u0022, \\u0022CV\\u0022, \\u0022MAX\\u0022, \\u0022MEAN\\u0022, \\u0022MIN\\u0022, \\u0022N\\u0022, \\u0022NMISS\\u0022, \\u0022PROBT\\u0022, \\u0022STD\\u0022, \\u0022STDERR\\u0022, \\u0022SUM\\u0022, \\u0022TSTAT\\u0022, \\u0022USS\\u0022, \\u0022VAR\\u0022], \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.where\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022isWhere\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022margins\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022fulltable\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}}, \\u0022label\\u0022: \\u0022Tabulation\\u0022, \\u0022desc\\u0022: \\u0022One-way or two-way tabulations\\u0022, \\u0022name\\u0022: \\u0022tkimstat.crosstab\\u0022}, \\u0022performance\\u0022: {\\u0022systemCores\\u0022: 4608, \\u0022elapsedTime\\u0022: 0.35789, \\u0022cpuSystemTime\\u0022: 1.4497840000000002, \\u0022systemTotalMemory\\u0022: 38966284091392, \\u0022memory\\u0022: 1250571328, \\u0022memorySystem\\u0022: 2866491680, \\u0022cpuUserTime\\u0022: 1.560777, \\u0022memoryOS\\u0022: 1745231872, \\u0022systemNodes\\u0022: 144, \\u0022memoryQuota\\u0022: 1760436224}}"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "CASResults([('Crosstab',   TargetBuy    Col1    Col2    Col3\n",
        "0    Bought  319580   73416   25384\n",
        "1        No  603744  368524  298300)])"
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "out = dat1.tkimstat.crosstab(row='DemReg', col='DemGender')\n",
      "\n",
      "df1 = out['Crosstab'].data\n",
      "df1 = df1.set_index('DemReg')\n",
      "\n",
      "vc.core.initialize_notebook()\n",
      "\n",
      "bar = vc.GroupedBar( df1[['Col1','Col2','Col3']] )\n",
      "bar.height = 300\n",
      "bar.length = 100\n",
      "bar.colors(brew='Set2')\n",
      "bar.legend(title='Gender')\n",
      "bar.display()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "\n",
        "           <script>\n",
        "               \n",
        "                function vct_load_lib(url, callback){\n",
        "                      if(typeof d3 !== 'undefined' &&\n",
        "                         url === 'http://d3js.org/d3.v3.min.js'){\n",
        "                        callback()\n",
        "                      }\n",
        "                      var s = document.createElement('script');\n",
        "                      s.src = url;\n",
        "                      s.async = true;\n",
        "                      s.onreadystatechange = s.onload = callback;\n",
        "                      s.onerror = function(){\n",
        "                        console.warn(\"failed to load library \" + url);\n",
        "                        };\n",
        "                      document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
        "                };\n",
        "                var vincent_event = new CustomEvent(\n",
        "                  \"vincent_libs_loaded\",\n",
        "                  {bubbles: true, cancelable: true}\n",
        "                );\n",
        "                \n",
        "               function load_all_libs(){\n",
        "                  console.log('Loading Vincent libs...')\n",
        "                  vct_load_lib('http://d3js.org/d3.v3.min.js', function(){\n",
        "                  vct_load_lib('http://d3js.org/d3.geo.projection.v0.min.js', function(){\n",
        "                  vct_load_lib('http://wrobstory.github.io/d3-cloud/d3.layout.cloud.js', function(){\n",
        "                  vct_load_lib('http://wrobstory.github.io/vega/vega.v1.3.3.js', function(){\n",
        "                  window.dispatchEvent(vincent_event);\n",
        "                  });\n",
        "                  });\n",
        "                  });\n",
        "                  });\n",
        "               };\n",
        "               if(typeof define === \"function\" && define.amd){\n",
        "                    if (window['d3'] === undefined ||\n",
        "                        window['topojson'] === undefined){\n",
        "                        require.config(\n",
        "                            {paths: {\n",
        "                              d3: 'http://d3js.org/d3.v3.min',\n",
        "                              topojson: 'http://d3js.org/topojson.v1.min'\n",
        "                              }\n",
        "                            }\n",
        "                          );\n",
        "                        require([\"d3\"], function(d3){\n",
        "                            console.log('Loading Vincent from require.js...')\n",
        "                            window.d3 = d3;\n",
        "                            require([\"topojson\"], function(topojson){\n",
        "                                window.topojson = topojson;\n",
        "                                load_all_libs();\n",
        "                            });\n",
        "                        });\n",
        "                    } else {\n",
        "                        load_all_libs();\n",
        "                    };\n",
        "               }else{\n",
        "                    console.log('Require.js not found, loading manually...')\n",
        "                    load_all_libs();\n",
        "               };\n",
        "\n",
        "           </script>"
       ],
       "metadata": {},
       "output_type": "display_data",
       "text": [
        "<IPython.core.display.HTML at 0xbcbb978>"
       ]
      },
      {
       "html": [
        "<div id=\"viscc9c63720a6c4dfcbd11e41ad2e24397\"></div>\n",
        "<script>\n",
        "   ( function() {\n",
        "     var _do_plot = function() {\n",
        "       if (typeof vg === 'undefined') {\n",
        "         window.addEventListener('vincent_libs_loaded', _do_plot)\n",
        "         return;\n",
        "       }\n",
        "       vg.parse.spec({\"axes\": [{\"scale\": \"x\", \"type\": \"x\"}, {\"scale\": \"y\", \"type\": \"y\"}], \"data\": [{\"name\": \"table\", \"values\": [{\"col\": \"Col1\", \"idx\": \"Midlands\", \"val\": 276108.0}, {\"col\": \"Col2\", \"idx\": \"Midlands\", \"val\": 136268.0}, {\"col\": \"Col3\", \"idx\": \"Midlands\", \"val\": 99940.0}, {\"col\": \"Col1\", \"idx\": \"North\", \"val\": 182704.0}, {\"col\": \"Col2\", \"idx\": \"North\", \"val\": 84588.0}, {\"col\": \"Col3\", \"idx\": \"North\", \"val\": 61332.0}, {\"col\": \"Col1\", \"idx\": \"Scottish\", \"val\": 55556.0}, {\"col\": \"Col2\", \"idx\": \"Scottish\", \"val\": 28576.0}, {\"col\": \"Col3\", \"idx\": \"Scottish\", \"val\": 19836.0}, {\"col\": \"Col1\", \"idx\": \"South East\", \"val\": 362064.0}, {\"col\": \"Col2\", \"idx\": \"South East\", \"val\": 168112.0}, {\"col\": \"Col3\", \"idx\": \"South East\", \"val\": 126008.0}, {\"col\": \"Col1\", \"idx\": \"South West\", \"val\": 27816.0}, {\"col\": \"Col2\", \"idx\": \"South West\", \"val\": 14668.0}, {\"col\": \"Col3\", \"idx\": \"South West\", \"val\": 10032.0}, {\"col\": \"Col1\", \"idx\": \"Unknown\", \"val\": 19076.0}, {\"col\": \"Col2\", \"idx\": \"Unknown\", \"val\": 9728.0}, {\"col\": \"Col3\", \"idx\": \"Unknown\", \"val\": 6536.0}]}], \"height\": 300, \"legends\": [{\"fill\": \"color\", \"offset\": 0, \"properties\": {}, \"title\": \"Gender\"}], \"marks\": [{\"from\": {\"data\": \"table\", \"transform\": [{\"keys\": [\"data.idx\"], \"type\": \"facet\"}]}, \"marks\": [{\"properties\": {\"enter\": {\"fill\": {\"field\": \"data.col\", \"scale\": \"color\"}, \"width\": {\"band\": true, \"offset\": -1, \"scale\": \"pos\"}, \"x\": {\"field\": \"data.col\", \"scale\": \"pos\"}, \"y\": {\"field\": \"data.val\", \"scale\": \"y\"}, \"y2\": {\"scale\": \"y\", \"value\": 0}}}, \"type\": \"rect\"}], \"properties\": {\"enter\": {\"width\": {\"band\": true, \"scale\": \"x\"}, \"x\": {\"field\": \"key\", \"scale\": \"x\"}}}, \"scales\": [{\"domain\": {\"field\": \"data.col\"}, \"name\": \"pos\", \"range\": \"width\", \"type\": \"ordinal\"}], \"type\": \"group\"}], \"padding\": \"auto\", \"scales\": [{\"domain\": {\"data\": \"table\", \"field\": \"data.idx\"}, \"name\": \"x\", \"padding\": 0.2, \"range\": \"width\", \"type\": \"ordinal\"}, {\"domain\": {\"data\": \"table\", \"field\": \"data.val\"}, \"name\": \"y\", \"nice\": true, \"range\": \"height\"}, {\"domain\": {\"data\": \"table\", \"field\": \"data.col\"}, \"name\": \"color\", \"range\": [\"#66c2a5\", \"#fc8d62\", \"#8da0cb\", \"#e78ac3\", \"#a6d854\", \"#ffd92f\", \"#e5c494\", \"#b3b3b3\"], \"type\": \"ordinal\"}], \"width\": 960}, function(chart) {\n",
        "         chart({el: \"#viscc9c63720a6c4dfcbd11e41ad2e24397\"}).update();\n",
        "       });\n",
        "     };\n",
        "     _do_plot();\n",
        "   })();\n",
        "</script>\n",
        "<style>.vega canvas {width: 100%;}</style>\n",
        "        "
       ],
       "metadata": {},
       "output_type": "display_data",
       "text": [
        "<IPython.core.display.HTML at 0xbcbb978>"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Load table from local pandas data frame"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "iris = pd.read_csv(r'C:\\Public\\UCIData\\iris.data',sep=',',header=None, names=['sepal_l','sepal_w','petal_l', 'petal_w', 'class'])\n",
      "iris = iris.ix[0:149]\n",
      "type(iris)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "pandas.core.frame.DataFrame"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "h = PandasDataFrame(iris)\n",
      "s.addtable(table='iris', **h.args.addtable)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div class=\"cas-output-area\"></div>\n",
        "<table class=\"cas-results-performance\"><tr>\n",
        "<th>Elapsed</th><td>0.283s</td>\n",
        "<th>User</th><td>0.164s</td>\n",
        "<th>Sys</th><td>0.424s</td>\n",
        "<th>Mem</th><td>42.8MB</td>\n",
        "</tr></table>"
       ],
       "javascript": [
        "\n",
        "   (function ($) {\n",
        "      var custom = $('link[rel=\"stylesheet\"][href^=\"/static/custom/custom.css\"]');\n",
        "      var head = $('head');\n",
        "      $.each([\"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/css/swat.css\", \"//cdn.datatables.net/1.10.3/css/jquery.dataTables.min.css\"], function (index, value) {\n",
        "         if ( $('link[rel=\"stylesheet\"][href=\"' + value + '\"]').length == 0 ) {\n",
        "            if ( custom.length > 0 ) {\n",
        "               custom.before($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            } else {\n",
        "               head.prepend($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            }\n",
        "         }\n",
        "      });\n",
        "   })($);\n",
        "\n",
        "   requirejs.config({enforceDefine:true});\n",
        "\n",
        "   require([\"datatables\", \"swat\"], function () {}, function (err) {\n",
        "      var ids = err.requireModules;\n",
        "      if ( ids && ids.length ) {\n",
        "         var configpaths = {\"datatables\": \"//cdn.datatables.net/1.10.3/js/jquery.dataTables.min\", \"swat\": \"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/js/swat\"};\n",
        "         for ( var i = 0; i < ids.length; i++ ) {\n",
        "            var id = ids[i];\n",
        "            var paths = {};\n",
        "            paths[id] = configpaths[id];\n",
        "            requirejs.undef(id);\n",
        "            requirejs.config({paths:paths});\n",
        "            require([id], function () {});\n",
        "         } \n",
        "      }\n",
        "   });\n",
        "   \n",
        "           require(['swat'], function (swat) {\n",
        "              new swat.CASResults(element, JSON.parse('{\\u0022messages\\u0022: [], \\u0022session\\u0022: \\u0022B9DC4635-FD3B-4109-9374-135012147C8D\\u0022, \\u0022disposition\\u0022: {\\u0022reason\\u0022: 0, \\u0022severity\\u0022: 0, \\u0022debug\\u0022: null, \\u0022status\\u0022: null}, \\u0022signature\\u0022: {\\u0022params\\u0022: {\\u0022append\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022compress\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022repeat\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022label\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022partition\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022copies\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022int32\\u0022, \\u0022hasInclMin\\u0022: 1, \\u0022valueMin\\u0022: 0}, \\u0022commitsec\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022int64\\u0022, \\u0022hasInclMin\\u0022: 1, \\u0022valueMin\\u0022: 0}, \\u0022maxmbytes\\u0022: {\\u0022default\\u0022: 512, \\u0022type\\u0022: \\u0022int64\\u0022}, \\u0022vars\\u0022: {\\u0022default\\u0022: [{\\u0022offset\\u0022: 0, \\u0022rtype\\u0022: \\u0022NUMERIC\\u0022, \\u0022length\\u0022: 8, \\u0022type\\u0022: \\u0022SAS\\u0022, \\u0022name\\u0022: \\u0022sepal_l\\u0022}, {\\u0022offset\\u0022: 8, \\u0022rtype\\u0022: \\u0022NUMERIC\\u0022, \\u0022length\\u0022: 8, \\u0022type\\u0022: \\u0022SAS\\u0022, \\u0022name\\u0022: \\u0022sepal_w\\u0022}, {\\u0022offset\\u0022: 16, \\u0022rtype\\u0022: \\u0022NUMERIC\\u0022, \\u0022length\\u0022: 8, \\u0022type\\u0022: \\u0022SAS\\u0022, \\u0022name\\u0022: \\u0022petal_l\\u0022}, {\\u0022offset\\u0022: 24, \\u0022rtype\\u0022: \\u0022NUMERIC\\u0022, \\u0022length\\u0022: 8, \\u0022type\\u0022: \\u0022SAS\\u0022, \\u0022name\\u0022: \\u0022petal_w\\u0022}, {\\u0022offset\\u0022: 32, \\u0022rtype\\u0022: \\u0022CHAR\\u0022, \\u0022length\\u0022: 15, \\u0022type\\u0022: \\u0022SAS\\u0022, \\u0022name\\u0022: \\u0022class\\u0022}], \\u0022exemplar\\u0022: [{\\u0022default\\u0022: \\u0022\\u0022, \\u0022isRequired\\u0022: 1, \\u0022type\\u0022: 4.0, \\u0022name\\u0022: \\u0022name\\u0022}, {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: 4.0, \\u0022name\\u0022: \\u0022label\\u0022}, {\\u0022isRequired\\u0022: 1, \\u0022hasInclMin\\u0022: 1, \\u0022valueMin\\u0022: 1, \\u0022default\\u0022: 0, \\u0022type\\u0022: 1.0, \\u0022name\\u0022: \\u0022length\\u0022}, {\\u0022default\\u0022: \\u0022CHAR\\u0022, \\u0022allowedValues\\u0022: [\\u0022CHAR\\u0022, \\u0022NUMERIC\\u0022], \\u0022isRequired\\u0022: 1, \\u0022type\\u0022: 4.0, \\u0022name\\u0022: \\u0022rtype\\u0022}, {\\u0022default\\u0022: \\u0022SAS\\u0022, \\u0022allowedValues\\u0022: [\\u0022BINARY\\u0022, \\u0022DATE\\u0022, \\u0022DATETIME\\u0022, \\u0022DECQUAD\\u0022, \\u0022INT32\\u0022, \\u0022INT64\\u0022, \\u0022SAS\\u0022, \\u0022TIME\\u0022, \\u0022UNKNOWN\\u0022], \\u0022type\\u0022: 4.0, \\u0022name\\u0022: \\u0022type\\u0022}, {\\u0022isRequired\\u0022: 1, \\u0022hasInclMin\\u0022: 1, \\u0022valueMin\\u0022: 0, \\u0022default\\u0022: 0, \\u0022type\\u0022: 1.0, \\u0022name\\u0022: \\u0022offset\\u0022}, {\\u0022default\\u0022: 0, \\u0022type\\u0022: 1.0, \\u0022name\\u0022: \\u0022formattedlength\\u0022}, {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: 4.0, \\u0022name\\u0022: \\u0022format\\u0022}, {\\u0022default\\u0022: 0, \\u0022type\\u0022: 1.0, \\u0022name\\u0022: \\u0022nfl\\u0022}, {\\u0022default\\u0022: 0, \\u0022type\\u0022: 1.0, \\u0022name\\u0022: \\u0022nfd\\u0022}], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022replace\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022orderby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022reclen\\u0022: {\\u0022hasInclMin\\u0022: 1, \\u0022isRequired\\u0022: 1, \\u0022valueMin\\u0022: 1, \\u0022type\\u0022: \\u0022int32\\u0022, \\u0022default\\u0022: 47}, \\u0022table\\u0022: {\\u0022default\\u0022: \\u0022iris\\u0022, \\u0022isTableName\\u0022: 1, \\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022descending\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022commitrec\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022int64\\u0022, \\u0022hasInclMin\\u0022: 1, \\u0022valueMin\\u0022: 0}, \\u0022promote\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}}, \\u0022label\\u0022: \\u0022Add table\\u0022, \\u0022desc\\u0022: \\u0022Add a table to the session\\u0022, \\u0022name\\u0022: \\u0022tkcastab.addtable\\u0022}, \\u0022performance\\u0022: {\\u0022systemCores\\u0022: 4608, \\u0022elapsedTime\\u0022: 0.282897, \\u0022cpuSystemTime\\u0022: 0.42393200000000003, \\u0022systemTotalMemory\\u0022: 38966284091392, \\u0022memory\\u0022: 44895296, \\u0022memorySystem\\u0022: 2897693056, \\u0022cpuUserTime\\u0022: 0.16397399999999998, \\u0022memoryOS\\u0022: 1306140672, \\u0022systemNodes\\u0022: 144, \\u0022memoryQuota\\u0022: 1779048448}}'), function (element) {\n",
        "                 \n",
        "              });\n",
        "           });"
       ],
       "json": [
        "{\\u0022messages\\u0022: [], \\u0022session\\u0022: \\u0022B9DC4635-FD3B-4109-9374-135012147C8D\\u0022, \\u0022disposition\\u0022: {\\u0022reason\\u0022: 0, \\u0022severity\\u0022: 0, \\u0022debug\\u0022: null, \\u0022status\\u0022: null}, \\u0022signature\\u0022: {\\u0022params\\u0022: {\\u0022append\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022compress\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022repeat\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022label\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022partition\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022copies\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022int32\\u0022, \\u0022hasInclMin\\u0022: 1, \\u0022valueMin\\u0022: 0}, \\u0022commitsec\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022int64\\u0022, \\u0022hasInclMin\\u0022: 1, \\u0022valueMin\\u0022: 0}, \\u0022maxmbytes\\u0022: {\\u0022default\\u0022: 512, \\u0022type\\u0022: \\u0022int64\\u0022}, \\u0022vars\\u0022: {\\u0022default\\u0022: [{\\u0022offset\\u0022: 0, \\u0022rtype\\u0022: \\u0022NUMERIC\\u0022, \\u0022length\\u0022: 8, \\u0022type\\u0022: \\u0022SAS\\u0022, \\u0022name\\u0022: \\u0022sepal_l\\u0022}, {\\u0022offset\\u0022: 8, \\u0022rtype\\u0022: \\u0022NUMERIC\\u0022, \\u0022length\\u0022: 8, \\u0022type\\u0022: \\u0022SAS\\u0022, \\u0022name\\u0022: \\u0022sepal_w\\u0022}, {\\u0022offset\\u0022: 16, \\u0022rtype\\u0022: \\u0022NUMERIC\\u0022, \\u0022length\\u0022: 8, \\u0022type\\u0022: \\u0022SAS\\u0022, \\u0022name\\u0022: \\u0022petal_l\\u0022}, {\\u0022offset\\u0022: 24, \\u0022rtype\\u0022: \\u0022NUMERIC\\u0022, \\u0022length\\u0022: 8, \\u0022type\\u0022: \\u0022SAS\\u0022, \\u0022name\\u0022: \\u0022petal_w\\u0022}, {\\u0022offset\\u0022: 32, \\u0022rtype\\u0022: \\u0022CHAR\\u0022, \\u0022length\\u0022: 15, \\u0022type\\u0022: \\u0022SAS\\u0022, \\u0022name\\u0022: \\u0022class\\u0022}], \\u0022exemplar\\u0022: [{\\u0022default\\u0022: \\u0022\\u0022, \\u0022isRequired\\u0022: 1, \\u0022type\\u0022: 4.0, \\u0022name\\u0022: \\u0022name\\u0022}, {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: 4.0, \\u0022name\\u0022: \\u0022label\\u0022}, {\\u0022isRequired\\u0022: 1, \\u0022hasInclMin\\u0022: 1, \\u0022valueMin\\u0022: 1, \\u0022default\\u0022: 0, \\u0022type\\u0022: 1.0, \\u0022name\\u0022: \\u0022length\\u0022}, {\\u0022default\\u0022: \\u0022CHAR\\u0022, \\u0022allowedValues\\u0022: [\\u0022CHAR\\u0022, \\u0022NUMERIC\\u0022], \\u0022isRequired\\u0022: 1, \\u0022type\\u0022: 4.0, \\u0022name\\u0022: \\u0022rtype\\u0022}, {\\u0022default\\u0022: \\u0022SAS\\u0022, \\u0022allowedValues\\u0022: [\\u0022BINARY\\u0022, \\u0022DATE\\u0022, \\u0022DATETIME\\u0022, \\u0022DECQUAD\\u0022, \\u0022INT32\\u0022, \\u0022INT64\\u0022, \\u0022SAS\\u0022, \\u0022TIME\\u0022, \\u0022UNKNOWN\\u0022], \\u0022type\\u0022: 4.0, \\u0022name\\u0022: \\u0022type\\u0022}, {\\u0022isRequired\\u0022: 1, \\u0022hasInclMin\\u0022: 1, \\u0022valueMin\\u0022: 0, \\u0022default\\u0022: 0, \\u0022type\\u0022: 1.0, \\u0022name\\u0022: \\u0022offset\\u0022}, {\\u0022default\\u0022: 0, \\u0022type\\u0022: 1.0, \\u0022name\\u0022: \\u0022formattedlength\\u0022}, {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: 4.0, \\u0022name\\u0022: \\u0022format\\u0022}, {\\u0022default\\u0022: 0, \\u0022type\\u0022: 1.0, \\u0022name\\u0022: \\u0022nfl\\u0022}, {\\u0022default\\u0022: 0, \\u0022type\\u0022: 1.0, \\u0022name\\u0022: \\u0022nfd\\u0022}], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022replace\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022orderby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022reclen\\u0022: {\\u0022hasInclMin\\u0022: 1, \\u0022isRequired\\u0022: 1, \\u0022valueMin\\u0022: 1, \\u0022type\\u0022: \\u0022int32\\u0022, \\u0022default\\u0022: 47}, \\u0022table\\u0022: {\\u0022default\\u0022: \\u0022iris\\u0022, \\u0022isTableName\\u0022: 1, \\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022descending\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022commitrec\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022int64\\u0022, \\u0022hasInclMin\\u0022: 1, \\u0022valueMin\\u0022: 0}, \\u0022promote\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}}, \\u0022label\\u0022: \\u0022Add table\\u0022, \\u0022desc\\u0022: \\u0022Add a table to the session\\u0022, \\u0022name\\u0022: \\u0022tkcastab.addtable\\u0022}, \\u0022performance\\u0022: {\\u0022systemCores\\u0022: 4608, \\u0022elapsedTime\\u0022: 0.282897, \\u0022cpuSystemTime\\u0022: 0.42393200000000003, \\u0022systemTotalMemory\\u0022: 38966284091392, \\u0022memory\\u0022: 44895296, \\u0022memorySystem\\u0022: 2897693056, \\u0022cpuUserTime\\u0022: 0.16397399999999998, \\u0022memoryOS\\u0022: 1306140672, \\u0022systemNodes\\u0022: 144, \\u0022memoryQuota\\u0022: 1779048448}}"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 19,
       "text": [
        "CASResults()"
       ]
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "dat2 = s.CASTable('iris')\n",
      "dat2.setParams(groupby=['class'])\n",
      "dat2.summary()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div><table class=\"cas-results-key\"><tr><th>Summary</th></tr></table></div>\n",
        "<div class=\"cas-results-body\">\n",
        "<table class=\"cas-dataframe\">\n",
        "<thead>\n",
        "<tr><th colspan=\"11\">Descriptive Statistics for IRIS</th></tr>\n",
        "<tr>\n",
        "<th>class</th>\n",
        "<th>Analysis Variable</th>\n",
        "<th>Min</th>\n",
        "<th>Max</th>\n",
        "<th>N</th>\n",
        "<th>Mean</th>\n",
        "<th>Sum</th>\n",
        "<th>Std</th>\n",
        "<th>StdErr</th>\n",
        "<th>CV</th>\n",
        "<th>NMiss</th>\n",
        "</tr>\n",
        "</thead>\n",
        "<tbody>\n",
        "<tr>\n",
        "<td>Iris-setosa</td>\n",
        "<td>sepal_l</td>\n",
        "<td>4.3</td>\n",
        "<td>5.8</td>\n",
        "<td>50</td>\n",
        "<td>5.006</td>\n",
        "<td>250.3</td>\n",
        "<td>0.35249</td>\n",
        "<td>0.04985</td>\n",
        "<td>7.041344</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Iris-setosa</td>\n",
        "<td>sepal_w</td>\n",
        "<td>2.3</td>\n",
        "<td>4.4</td>\n",
        "<td>50</td>\n",
        "<td>3.418</td>\n",
        "<td>170.9</td>\n",
        "<td>0.381024</td>\n",
        "<td>0.053885</td>\n",
        "<td>11.14758</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Iris-setosa</td>\n",
        "<td>petal_l</td>\n",
        "<td>1</td>\n",
        "<td>1.9</td>\n",
        "<td>50</td>\n",
        "<td>1.464</td>\n",
        "<td>73.2</td>\n",
        "<td>0.173511</td>\n",
        "<td>0.024538</td>\n",
        "<td>11.85186</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Iris-setosa</td>\n",
        "<td>petal_w</td>\n",
        "<td>0.1</td>\n",
        "<td>0.6</td>\n",
        "<td>50</td>\n",
        "<td>0.244</td>\n",
        "<td>12.2</td>\n",
        "<td>0.10721</td>\n",
        "<td>0.015162</td>\n",
        "<td>43.93832</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "</tbody>\n",
        "</table>\n",
        "</div>\n",
        "<div><table class=\"cas-results-key\"><tr><th>Summary1</th></tr></table></div>\n",
        "<div class=\"cas-results-body\">\n",
        "<table class=\"cas-dataframe\">\n",
        "<thead>\n",
        "<tr><th colspan=\"11\">Descriptive Statistics for IRIS</th></tr>\n",
        "<tr>\n",
        "<th>class</th>\n",
        "<th>Analysis Variable</th>\n",
        "<th>Min</th>\n",
        "<th>Max</th>\n",
        "<th>N</th>\n",
        "<th>Mean</th>\n",
        "<th>Sum</th>\n",
        "<th>Std</th>\n",
        "<th>StdErr</th>\n",
        "<th>CV</th>\n",
        "<th>NMiss</th>\n",
        "</tr>\n",
        "</thead>\n",
        "<tbody>\n",
        "<tr>\n",
        "<td>Iris-versicolor</td>\n",
        "<td>sepal_l</td>\n",
        "<td>4.9</td>\n",
        "<td>7</td>\n",
        "<td>50</td>\n",
        "<td>5.936</td>\n",
        "<td>296.8</td>\n",
        "<td>0.516171</td>\n",
        "<td>0.072998</td>\n",
        "<td>8.695606</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Iris-versicolor</td>\n",
        "<td>sepal_w</td>\n",
        "<td>2</td>\n",
        "<td>3.4</td>\n",
        "<td>50</td>\n",
        "<td>2.77</td>\n",
        "<td>138.5</td>\n",
        "<td>0.313798</td>\n",
        "<td>0.044378</td>\n",
        "<td>11.32846</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Iris-versicolor</td>\n",
        "<td>petal_l</td>\n",
        "<td>3</td>\n",
        "<td>5.1</td>\n",
        "<td>50</td>\n",
        "<td>4.26</td>\n",
        "<td>213</td>\n",
        "<td>0.469911</td>\n",
        "<td>0.066455</td>\n",
        "<td>11.03077</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Iris-versicolor</td>\n",
        "<td>petal_w</td>\n",
        "<td>1</td>\n",
        "<td>1.8</td>\n",
        "<td>50</td>\n",
        "<td>1.326</td>\n",
        "<td>66.3</td>\n",
        "<td>0.197753</td>\n",
        "<td>0.027966</td>\n",
        "<td>14.91348</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "</tbody>\n",
        "</table>\n",
        "</div>\n",
        "<div><table class=\"cas-results-key\"><tr><th>Summary2</th></tr></table></div>\n",
        "<div class=\"cas-results-body\">\n",
        "<table class=\"cas-dataframe\">\n",
        "<thead>\n",
        "<tr><th colspan=\"11\">Descriptive Statistics for IRIS</th></tr>\n",
        "<tr>\n",
        "<th>class</th>\n",
        "<th>Analysis Variable</th>\n",
        "<th>Min</th>\n",
        "<th>Max</th>\n",
        "<th>N</th>\n",
        "<th>Mean</th>\n",
        "<th>Sum</th>\n",
        "<th>Std</th>\n",
        "<th>StdErr</th>\n",
        "<th>CV</th>\n",
        "<th>NMiss</th>\n",
        "</tr>\n",
        "</thead>\n",
        "<tbody>\n",
        "<tr>\n",
        "<td>Iris-virginica</td>\n",
        "<td>sepal_l</td>\n",
        "<td>4.9</td>\n",
        "<td>7.9</td>\n",
        "<td>50</td>\n",
        "<td>6.588</td>\n",
        "<td>329.4</td>\n",
        "<td>0.63588</td>\n",
        "<td>0.089927</td>\n",
        "<td>9.652089</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Iris-virginica</td>\n",
        "<td>sepal_w</td>\n",
        "<td>2.2</td>\n",
        "<td>3.8</td>\n",
        "<td>50</td>\n",
        "<td>2.974</td>\n",
        "<td>148.7</td>\n",
        "<td>0.322497</td>\n",
        "<td>0.045608</td>\n",
        "<td>10.84387</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Iris-virginica</td>\n",
        "<td>petal_l</td>\n",
        "<td>4.5</td>\n",
        "<td>6.9</td>\n",
        "<td>50</td>\n",
        "<td>5.552</td>\n",
        "<td>277.6</td>\n",
        "<td>0.551895</td>\n",
        "<td>0.07805</td>\n",
        "<td>9.940466</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Iris-virginica</td>\n",
        "<td>petal_w</td>\n",
        "<td>1.4</td>\n",
        "<td>2.5</td>\n",
        "<td>50</td>\n",
        "<td>2.026</td>\n",
        "<td>101.3</td>\n",
        "<td>0.27465</td>\n",
        "<td>0.038841</td>\n",
        "<td>13.55627</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "</tbody>\n",
        "</table>\n",
        "</div>\n",
        "<div class=\"cas-output-area\"></div>\n",
        "<table class=\"cas-results-performance\"><tr>\n",
        "<th>Elapsed</th><td>0.268s</td>\n",
        "<th>User</th><td>0.27s</td>\n",
        "<th>Sys</th><td>0.528s</td>\n",
        "<th>Mem</th><td>86.8MB</td>\n",
        "</tr></table>"
       ],
       "javascript": [
        "\n",
        "   (function ($) {\n",
        "      var custom = $('link[rel=\"stylesheet\"][href^=\"/static/custom/custom.css\"]');\n",
        "      var head = $('head');\n",
        "      $.each([\"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/css/swat.css\", \"//cdn.datatables.net/1.10.3/css/jquery.dataTables.min.css\"], function (index, value) {\n",
        "         if ( $('link[rel=\"stylesheet\"][href=\"' + value + '\"]').length == 0 ) {\n",
        "            if ( custom.length > 0 ) {\n",
        "               custom.before($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            } else {\n",
        "               head.prepend($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            }\n",
        "         }\n",
        "      });\n",
        "   })($);\n",
        "\n",
        "   requirejs.config({enforceDefine:true});\n",
        "\n",
        "   require([\"datatables\", \"swat\"], function () {}, function (err) {\n",
        "      var ids = err.requireModules;\n",
        "      if ( ids && ids.length ) {\n",
        "         var configpaths = {\"datatables\": \"//cdn.datatables.net/1.10.3/js/jquery.dataTables.min\", \"swat\": \"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/js/swat\"};\n",
        "         for ( var i = 0; i < ids.length; i++ ) {\n",
        "            var id = ids[i];\n",
        "            var paths = {};\n",
        "            paths[id] = configpaths[id];\n",
        "            requirejs.undef(id);\n",
        "            requirejs.config({paths:paths});\n",
        "            require([id], function () {});\n",
        "         } \n",
        "      }\n",
        "   });\n",
        "   \n",
        "           require(['swat'], function (swat) {\n",
        "              new swat.CASResults(element, JSON.parse('{\\u0022messages\\u0022: [], \\u0022session\\u0022: \\u0022B9DC4635-FD3B-4109-9374-135012147C8D\\u0022, \\u0022disposition\\u0022: {\\u0022reason\\u0022: 0, \\u0022severity\\u0022: 0, \\u0022debug\\u0022: null, \\u0022status\\u0022: null}, \\u0022signature\\u0022: {\\u0022params\\u0022: {\\u0022orderbydesc\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022groupbylimit\\u0022: {\\u0022type\\u0022: \\u0022int64\\u0022}, \\u0022table.orderby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isOrderBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022casout\\u0022: {\\u0022parmListTag\\u0022: \\u0022casouttable\\u0022, \\u0022isOutTableDef\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022orderbyformat\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.name\\u0022: {\\u0022default\\u0022: \\u0022iris\\u0022, \\u0022isTableName\\u0022: 1, \\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.groupbyfmts\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022casout.compress\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022casout.blocksize\\u0022: {\\u0022type\\u0022: \\u0022int64\\u0022, \\u0022hasInclMin\\u0022: 1, \\u0022valueMin\\u0022: 0}, \\u0022table.caslib\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.comppgm\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022multitable\\u0022: {\\u0022default\\u0022: 1, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.groupbymode\\u0022: {\\u0022default\\u0022: \\u0022NOSORT\\u0022, \\u0022allowedValues\\u0022: [\\u0022NOSORT\\u0022, \\u0022REDISTRIBUTE\\u0022], \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table\\u0022: {\\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022, \\u0022parmListTag\\u0022: \\u0022castable\\u0022, \\u0022isTableDef\\u0022: 1}, \\u0022table.compondemand\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.varlist\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022repeat\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.compvars\\u0022: {\\u0022isCompVar\\u0022: 1, \\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022limit\\u0022: {\\u0022hasInclMin\\u0022: 1, \\u0022hasInclMax\\u0022: 1, \\u0022valueMin\\u0022: 0, \\u0022type\\u0022: \\u0022int32\\u0022, \\u0022default\\u0022: 0, \\u0022valueMax\\u0022: 2147483647}, \\u0022table.groupby\\u0022: {\\u0022default\\u0022: [\\u0022class\\u0022], \\u0022isVar\\u0022: 1, \\u0022isGroupBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022casout.replication\\u0022: {\\u0022default\\u0022: 1, \\u0022type\\u0022: \\u0022int32\\u0022, \\u0022hasInclMin\\u0022: 1, \\u0022valueMin\\u0022: 0}, \\u0022casout.caslib\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022casout.name\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022isTableName\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022orderbyagg\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022table.where\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022isWhere\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022casout.replace\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022casout.timestamp\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}}, \\u0022label\\u0022: \\u0022Summary\\u0022, \\u0022desc\\u0022: \\u0022Descriptive statistics\\u0022, \\u0022name\\u0022: \\u0022tkimstat.summary\\u0022}, \\u0022performance\\u0022: {\\u0022systemCores\\u0022: 4608, \\u0022elapsedTime\\u0022: 0.268397, \\u0022cpuSystemTime\\u0022: 0.5279210000000001, \\u0022systemTotalMemory\\u0022: 38966284091392, \\u0022memory\\u0022: 90965952, \\u0022memorySystem\\u0022: 2897693056, \\u0022cpuUserTime\\u0022: 0.269944, \\u0022memoryOS\\u0022: 1295130624, \\u0022systemNodes\\u0022: 144, \\u0022memoryQuota\\u0022: 1779048448}}'), function (element) {\n",
        "                 \n",
        "   (function ($) {\n",
        "      var custom = $('link[rel=\"stylesheet\"][href^=\"/static/custom/custom.css\"]');\n",
        "      var head = $('head');\n",
        "      $.each([\"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/css/swat.css\", \"//cdn.datatables.net/1.10.3/css/jquery.dataTables.min.css\"], function (index, value) {\n",
        "         if ( $('link[rel=\"stylesheet\"][href=\"' + value + '\"]').length == 0 ) {\n",
        "            if ( custom.length > 0 ) {\n",
        "               custom.before($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            } else {\n",
        "               head.prepend($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            }\n",
        "         }\n",
        "      });\n",
        "   })($);\n",
        "\n",
        "   requirejs.config({enforceDefine:true});\n",
        "\n",
        "   require([\"datatables\", \"swat\"], function () {}, function (err) {\n",
        "      var ids = err.requireModules;\n",
        "      if ( ids && ids.length ) {\n",
        "         var configpaths = {\"datatables\": \"//cdn.datatables.net/1.10.3/js/jquery.dataTables.min\", \"swat\": \"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/js/swat\"};\n",
        "         for ( var i = 0; i < ids.length; i++ ) {\n",
        "            var id = ids[i];\n",
        "            var paths = {};\n",
        "            paths[id] = configpaths[id];\n",
        "            requirejs.undef(id);\n",
        "            requirejs.config({paths:paths});\n",
        "            require([id], function () {});\n",
        "         } \n",
        "      }\n",
        "   });\n",
        "   \n",
        "         require(['swat'], function (swat) {\n",
        "            new swat.CASDataFrame(element, JSON.parse('{\\u0022columns\\u0022: [{\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 0;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022class\\u0022, \\u0022targets\\u0022: 0}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 1;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Analysis Variable\\u0022, \\u0022targets\\u0022: 1}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 2;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Min\\u0022, \\u0022targets\\u0022: 2}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 3;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Max\\u0022, \\u0022targets\\u0022: 3}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 4;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022N\\u0022, \\u0022targets\\u0022: 4}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 5;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Mean\\u0022, \\u0022targets\\u0022: 5}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 6;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Sum\\u0022, \\u0022targets\\u0022: 6}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 7;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Std\\u0022, \\u0022targets\\u0022: 7}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 8;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022StdErr\\u0022, \\u0022targets\\u0022: 8}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 9;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022CV\\u0022, \\u0022targets\\u0022: 9}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 10;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022NMiss\\u0022, \\u0022targets\\u0022: 10}], \\u0022label\\u0022: \\u0022Descriptive Statistics for IRIS\\u0022, \\u0022data\\u0022: [[[\\u0022Iris-setosa\\u0022], [\\u0022sepal_l\\u0022], [\\u00224.3\\u0022, 4.3], [\\u00225.8\\u0022, 5.8], [\\u002250\\u0022, 50.0], [\\u00225.006\\u0022, 5.005999999999999], [\\u0022250.3\\u0022, 250.29999999999998], [\\u00220.35249\\u0022, 0.35248968721344887], [\\u00220.04985\\u0022, 0.04984956962539095], [\\u00227.041344\\u0022, 7.041344131311404], [\\u00220\\u0022, 0.0]], [[\\u0022Iris-setosa\\u0022], [\\u0022sepal_w\\u0022], [\\u00222.3\\u0022, 2.3], [\\u00224.4\\u0022, 4.4], [\\u002250\\u0022, 50.0], [\\u00223.418\\u0022, 3.4180000000000006], [\\u0022170.9\\u0022, 170.90000000000003], [\\u00220.381024\\u0022, 0.3810243979546901], [\\u00220.053885\\u0022, 0.053884987118256615], [\\u002211.14758\\u0022, 11.147583322255414], [\\u00220\\u0022, 0.0]], [[\\u0022Iris-setosa\\u0022], [\\u0022petal_l\\u0022], [\\u00221\\u0022, 1.0], [\\u00221.9\\u0022, 1.9], [\\u002250\\u0022, 50.0], [\\u00221.464\\u0022, 1.464], [\\u002273.2\\u0022, 73.2], [\\u00220.173511\\u0022, 0.173511159436443], [\\u00220.024538\\u0022, 0.02453818348980981], [\\u002211.85186\\u0022, 11.8518551527625], [\\u00220\\u0022, 0.0]], [[\\u0022Iris-setosa\\u0022], [\\u0022petal_w\\u0022], [\\u00220.1\\u0022, 0.1], [\\u00220.6\\u0022, 0.6], [\\u002250\\u0022, 50.0], [\\u00220.244\\u0022, 0.2439999999999999], [\\u002212.2\\u0022, 12.199999999999996], [\\u00220.10721\\u0022, 0.10720950308167866], [\\u00220.015162\\u0022, 0.015161713327339009], [\\u002243.93832\\u0022, 43.93832093511422], [\\u00220\\u0022, 0.0]]]}'));\n",
        "         });\n",
        "\n",
        "   (function ($) {\n",
        "      var custom = $('link[rel=\"stylesheet\"][href^=\"/static/custom/custom.css\"]');\n",
        "      var head = $('head');\n",
        "      $.each([\"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/css/swat.css\", \"//cdn.datatables.net/1.10.3/css/jquery.dataTables.min.css\"], function (index, value) {\n",
        "         if ( $('link[rel=\"stylesheet\"][href=\"' + value + '\"]').length == 0 ) {\n",
        "            if ( custom.length > 0 ) {\n",
        "               custom.before($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            } else {\n",
        "               head.prepend($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            }\n",
        "         }\n",
        "      });\n",
        "   })($);\n",
        "\n",
        "   requirejs.config({enforceDefine:true});\n",
        "\n",
        "   require([\"datatables\", \"swat\"], function () {}, function (err) {\n",
        "      var ids = err.requireModules;\n",
        "      if ( ids && ids.length ) {\n",
        "         var configpaths = {\"datatables\": \"//cdn.datatables.net/1.10.3/js/jquery.dataTables.min\", \"swat\": \"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/js/swat\"};\n",
        "         for ( var i = 0; i < ids.length; i++ ) {\n",
        "            var id = ids[i];\n",
        "            var paths = {};\n",
        "            paths[id] = configpaths[id];\n",
        "            requirejs.undef(id);\n",
        "            requirejs.config({paths:paths});\n",
        "            require([id], function () {});\n",
        "         } \n",
        "      }\n",
        "   });\n",
        "   \n",
        "         require(['swat'], function (swat) {\n",
        "            new swat.CASDataFrame(element, JSON.parse('{\\u0022columns\\u0022: [{\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 0;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022class\\u0022, \\u0022targets\\u0022: 0}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 1;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Analysis Variable\\u0022, \\u0022targets\\u0022: 1}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 2;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Min\\u0022, \\u0022targets\\u0022: 2}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 3;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Max\\u0022, \\u0022targets\\u0022: 3}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 4;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022N\\u0022, \\u0022targets\\u0022: 4}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 5;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Mean\\u0022, \\u0022targets\\u0022: 5}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 6;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Sum\\u0022, \\u0022targets\\u0022: 6}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 7;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Std\\u0022, \\u0022targets\\u0022: 7}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 8;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022StdErr\\u0022, \\u0022targets\\u0022: 8}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 9;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022CV\\u0022, \\u0022targets\\u0022: 9}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 10;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022NMiss\\u0022, \\u0022targets\\u0022: 10}], \\u0022label\\u0022: \\u0022Descriptive Statistics for IRIS\\u0022, \\u0022data\\u0022: [[[\\u0022Iris-versicolor\\u0022], [\\u0022sepal_l\\u0022], [\\u00224.9\\u0022, 4.9], [\\u00227\\u0022, 7.0], [\\u002250\\u0022, 50.0], [\\u00225.936\\u0022, 5.936], [\\u0022296.8\\u0022, 296.8], [\\u00220.516171\\u0022, 0.5161711470638727], [\\u00220.072998\\u0022, 0.07299762366834062], [\\u00228.695606\\u0022, 8.695605577221576], [\\u00220\\u0022, 0.0]], [[\\u0022Iris-versicolor\\u0022], [\\u0022sepal_w\\u0022], [\\u00222\\u0022, 2.0], [\\u00223.4\\u0022, 3.4], [\\u002250\\u0022, 50.0], [\\u00222.77\\u0022, 2.7700000000000005], [\\u0022138.5\\u0022, 138.50000000000003], [\\u00220.313798\\u0022, 0.3137983233784092], [\\u00220.044378\\u0022, 0.044377784477168454], [\\u002211.32846\\u0022, 11.328459327740402], [\\u00220\\u0022, 0.0]], [[\\u0022Iris-versicolor\\u0022], [\\u0022petal_l\\u0022], [\\u00223\\u0022, 3.0], [\\u00225.1\\u0022, 5.1], [\\u002250\\u0022, 50.0], [\\u00224.26\\u0022, 4.26], [\\u0022213\\u0022, 212.99999999999997], [\\u00220.469911\\u0022, 0.4699109772399664], [\\u00220.066455\\u0022, 0.06645544771207552], [\\u002211.03077\\u0022, 11.030774113614235], [\\u00220\\u0022, 0.0]], [[\\u0022Iris-versicolor\\u0022], [\\u0022petal_w\\u0022], [\\u00221\\u0022, 1.0], [\\u00221.8\\u0022, 1.8], [\\u002250\\u0022, 50.0], [\\u00221.326\\u0022, 1.3259999999999998], [\\u002266.3\\u0022, 66.3], [\\u00220.197753\\u0022, 0.19775268000454274], [\\u00220.027966\\u0022, 0.027966452205805112], [\\u002214.91348\\u0022, 14.913475113464763], [\\u00220\\u0022, 0.0]]]}'));\n",
        "         });\n",
        "\n",
        "   (function ($) {\n",
        "      var custom = $('link[rel=\"stylesheet\"][href^=\"/static/custom/custom.css\"]');\n",
        "      var head = $('head');\n",
        "      $.each([\"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/css/swat.css\", \"//cdn.datatables.net/1.10.3/css/jquery.dataTables.min.css\"], function (index, value) {\n",
        "         if ( $('link[rel=\"stylesheet\"][href=\"' + value + '\"]').length == 0 ) {\n",
        "            if ( custom.length > 0 ) {\n",
        "               custom.before($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            } else {\n",
        "               head.prepend($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            }\n",
        "         }\n",
        "      });\n",
        "   })($);\n",
        "\n",
        "   requirejs.config({enforceDefine:true});\n",
        "\n",
        "   require([\"datatables\", \"swat\"], function () {}, function (err) {\n",
        "      var ids = err.requireModules;\n",
        "      if ( ids && ids.length ) {\n",
        "         var configpaths = {\"datatables\": \"//cdn.datatables.net/1.10.3/js/jquery.dataTables.min\", \"swat\": \"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/js/swat\"};\n",
        "         for ( var i = 0; i < ids.length; i++ ) {\n",
        "            var id = ids[i];\n",
        "            var paths = {};\n",
        "            paths[id] = configpaths[id];\n",
        "            requirejs.undef(id);\n",
        "            requirejs.config({paths:paths});\n",
        "            require([id], function () {});\n",
        "         } \n",
        "      }\n",
        "   });\n",
        "   \n",
        "         require(['swat'], function (swat) {\n",
        "            new swat.CASDataFrame(element, JSON.parse('{\\u0022columns\\u0022: [{\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 0;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022class\\u0022, \\u0022targets\\u0022: 0}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 1;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Analysis Variable\\u0022, \\u0022targets\\u0022: 1}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 2;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Min\\u0022, \\u0022targets\\u0022: 2}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 3;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Max\\u0022, \\u0022targets\\u0022: 3}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 4;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022N\\u0022, \\u0022targets\\u0022: 4}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 5;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Mean\\u0022, \\u0022targets\\u0022: 5}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 6;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Sum\\u0022, \\u0022targets\\u0022: 6}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 7;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Std\\u0022, \\u0022targets\\u0022: 7}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 8;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022StdErr\\u0022, \\u0022targets\\u0022: 8}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 9;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022CV\\u0022, \\u0022targets\\u0022: 9}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 10;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022NMiss\\u0022, \\u0022targets\\u0022: 10}], \\u0022label\\u0022: \\u0022Descriptive Statistics for IRIS\\u0022, \\u0022data\\u0022: [[[\\u0022Iris-virginica\\u0022], [\\u0022sepal_l\\u0022], [\\u00224.9\\u0022, 4.9], [\\u00227.9\\u0022, 7.9], [\\u002250\\u0022, 50.0], [\\u00226.588\\u0022, 6.587999999999997], [\\u0022329.4\\u0022, 329.39999999999986], [\\u00220.63588\\u0022, 0.6358795932744636], [\\u00220.089927\\u0022, 0.0899269544845034], [\\u00229.652089\\u0022, 9.652088543935395], [\\u00220\\u0022, 0.0]], [[\\u0022Iris-virginica\\u0022], [\\u0022sepal_w\\u0022], [\\u00222.2\\u0022, 2.2], [\\u00223.8\\u0022, 3.8], [\\u002250\\u0022, 50.0], [\\u00222.974\\u0022, 2.9739999999999984], [\\u0022148.7\\u0022, 148.69999999999993], [\\u00220.322497\\u0022, 0.3224966381726468], [\\u00220.045608\\u0022, 0.04560791195234859], [\\u002210.84387\\u0022, 10.843868129544282], [\\u00220\\u0022, 0.0]], [[\\u0022Iris-virginica\\u0022], [\\u0022petal_l\\u0022], [\\u00224.5\\u0022, 4.5], [\\u00226.9\\u0022, 6.9], [\\u002250\\u0022, 50.0], [\\u00225.552\\u0022, 5.552], [\\u0022277.6\\u0022, 277.59999999999997], [\\u00220.551895\\u0022, 0.5518946956639834], [\\u00220.07805\\u0022, 0.07804969636097771], [\\u00229.940466\\u0022, 9.940466420460798], [\\u00220\\u0022, 0.0]], [[\\u0022Iris-virginica\\u0022], [\\u0022petal_w\\u0022], [\\u00221.4\\u0022, 1.4], [\\u00222.5\\u0022, 2.5], [\\u002250\\u0022, 50.0], [\\u00222.026\\u0022, 2.026], [\\u0022101.3\\u0022, 101.29999999999998], [\\u00220.27465\\u0022, 0.2746500556366707], [\\u00220.038841\\u0022, 0.038841383358790484], [\\u002213.55627\\u0022, 13.556271255511884], [\\u00220\\u0022, 0.0]]]}'));\n",
        "         });\n",
        "              });\n",
        "           });"
       ],
       "json": [
        "{\\u0022messages\\u0022: [], \\u0022session\\u0022: \\u0022B9DC4635-FD3B-4109-9374-135012147C8D\\u0022, \\u0022disposition\\u0022: {\\u0022reason\\u0022: 0, \\u0022severity\\u0022: 0, \\u0022debug\\u0022: null, \\u0022status\\u0022: null}, \\u0022signature\\u0022: {\\u0022params\\u0022: {\\u0022orderbydesc\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022groupbylimit\\u0022: {\\u0022type\\u0022: \\u0022int64\\u0022}, \\u0022table.orderby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isOrderBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022casout\\u0022: {\\u0022parmListTag\\u0022: \\u0022casouttable\\u0022, \\u0022isOutTableDef\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022orderbyformat\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.name\\u0022: {\\u0022default\\u0022: \\u0022iris\\u0022, \\u0022isTableName\\u0022: 1, \\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.groupbyfmts\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022casout.compress\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022casout.blocksize\\u0022: {\\u0022type\\u0022: \\u0022int64\\u0022, \\u0022hasInclMin\\u0022: 1, \\u0022valueMin\\u0022: 0}, \\u0022table.caslib\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.comppgm\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022multitable\\u0022: {\\u0022default\\u0022: 1, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.groupbymode\\u0022: {\\u0022default\\u0022: \\u0022NOSORT\\u0022, \\u0022allowedValues\\u0022: [\\u0022NOSORT\\u0022, \\u0022REDISTRIBUTE\\u0022], \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table\\u0022: {\\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022, \\u0022parmListTag\\u0022: \\u0022castable\\u0022, \\u0022isTableDef\\u0022: 1}, \\u0022table.compondemand\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.varlist\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022repeat\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.compvars\\u0022: {\\u0022isCompVar\\u0022: 1, \\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022limit\\u0022: {\\u0022hasInclMin\\u0022: 1, \\u0022hasInclMax\\u0022: 1, \\u0022valueMin\\u0022: 0, \\u0022type\\u0022: \\u0022int32\\u0022, \\u0022default\\u0022: 0, \\u0022valueMax\\u0022: 2147483647}, \\u0022table.groupby\\u0022: {\\u0022default\\u0022: [\\u0022class\\u0022], \\u0022isVar\\u0022: 1, \\u0022isGroupBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022casout.replication\\u0022: {\\u0022default\\u0022: 1, \\u0022type\\u0022: \\u0022int32\\u0022, \\u0022hasInclMin\\u0022: 1, \\u0022valueMin\\u0022: 0}, \\u0022casout.caslib\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022casout.name\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022isTableName\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022orderbyagg\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022table.where\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022isWhere\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022casout.replace\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022casout.timestamp\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}}, \\u0022label\\u0022: \\u0022Summary\\u0022, \\u0022desc\\u0022: \\u0022Descriptive statistics\\u0022, \\u0022name\\u0022: \\u0022tkimstat.summary\\u0022}, \\u0022performance\\u0022: {\\u0022systemCores\\u0022: 4608, \\u0022elapsedTime\\u0022: 0.268397, \\u0022cpuSystemTime\\u0022: 0.5279210000000001, \\u0022systemTotalMemory\\u0022: 38966284091392, \\u0022memory\\u0022: 90965952, \\u0022memorySystem\\u0022: 2897693056, \\u0022cpuUserTime\\u0022: 0.269944, \\u0022memoryOS\\u0022: 1295130624, \\u0022systemNodes\\u0022: 144, \\u0022memoryQuota\\u0022: 1779048448}}"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 20,
       "text": [
        "CASResults([('Summary',          class   Column  Min  Max   N   Mean    Sum       Std    StdErr  \\\n",
        "0  Iris-setosa  sepal_l  4.3  5.8  50  5.006  250.3  0.352490  0.049850   \n",
        "1  Iris-setosa  sepal_w  2.3  4.4  50  3.418  170.9  0.381024  0.053885   \n",
        "2  Iris-setosa  petal_l  1.0  1.9  50  1.464   73.2  0.173511  0.024538   \n",
        "3  Iris-setosa  petal_w  0.1  0.6  50  0.244   12.2  0.107210  0.015162   \n",
        "\n",
        "          CV  NMiss  \n",
        "0   7.041344      0  \n",
        "1  11.147583      0  \n",
        "2  11.851855      0  \n",
        "3  43.938321      0  ), ('Summary1',              class   Column  Min  Max   N   Mean    Sum       Std    StdErr  \\\n",
        "0  Iris-versicolor  sepal_l  4.9  7.0  50  5.936  296.8  0.516171  0.072998   \n",
        "1  Iris-versicolor  sepal_w  2.0  3.4  50  2.770  138.5  0.313798  0.044378   \n",
        "2  Iris-versicolor  petal_l  3.0  5.1  50  4.260  213.0  0.469911  0.066455   \n",
        "3  Iris-versicolor  petal_w  1.0  1.8  50  1.326   66.3  0.197753  0.027966   \n",
        "\n",
        "          CV  NMiss  \n",
        "0   8.695606      0  \n",
        "1  11.328459      0  \n",
        "2  11.030774      0  \n",
        "3  14.913475      0  ), ('Summary2',             class   Column  Min  Max   N   Mean    Sum       Std    StdErr  \\\n",
        "0  Iris-virginica  sepal_l  4.9  7.9  50  6.588  329.4  0.635880  0.089927   \n",
        "1  Iris-virginica  sepal_w  2.2  3.8  50  2.974  148.7  0.322497  0.045608   \n",
        "2  Iris-virginica  petal_l  4.5  6.9  50  5.552  277.6  0.551895  0.078050   \n",
        "3  Iris-virginica  petal_w  1.4  2.5  50  2.026  101.3  0.274650  0.038841   \n",
        "\n",
        "          CV  NMiss  \n",
        "0   9.652089      0  \n",
        "1  10.843868      0  \n",
        "2   9.940466      0  \n",
        "3  13.556271      0  )])"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Interactive Decision Tree"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Display help for action set"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s.tkcasdt?"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 21
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Tab Completion"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Tab completion of members.  Capitalized members are action classes.  Lowercase versions are methods."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s.tkcasdt."
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "SyntaxError",
       "evalue": "invalid syntax (<ipython-input-22-9bc308ad1312>, line 1)",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-22-9bc308ad1312>\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    s.tkcasdt.\u001b[0m\n\u001b[1;37m              ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s.tkcasdt.dtree"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Train a decision tree model"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "* Set variable list\n",
      "* Set output table (containing the tree structure)\n",
      "* Call the decision tree grow action (train)\n",
      "* Print out messages and elapsed time"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "catLst = ['DemGender','DemHomeowner','PromClass']\n",
      "\n",
      "dat1.setParams(varlist = catLst)\n",
      "\n",
      "castree1 = s.CASTable('tmp_tree1')\n",
      "castree1.setParams(replace=True)\n",
      "\n",
      "out = s.dtreetrain( table    = dat1, \n",
      "                    casout   = castree1, \n",
      "                    target   = 'TargetBuy',\n",
      "                    nominal  = catLst,\n",
      "                    nbins    = 100, \n",
      "                    maxlevel = 4, \n",
      "                    leafsize = 100,\n",
      "                    varimp   = True)\n",
      "\n",
      "print(out.messages)\n",
      "print(out.performance.elapsedTime)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[]\n",
        "5.063817\n"
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s.fetch(table='tmp_tree1', to=100)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div><table class=\"cas-results-key\"><tr><th>Fetch</th></tr></table></div>\n",
        "<div class=\"cas-results-body\">\n",
        "<table class=\"cas-dataframe\">\n",
        "<thead>\n",
        "<tr><th colspan=\"27\">Selected Rows from Table TMP_TREE1</th></tr>\n",
        "<tr>\n",
        "<th>_Index_</th>\n",
        "<th>_Target_</th>\n",
        "<th>_NumTargetLevel_</th>\n",
        "<th>_TargetValL_</th>\n",
        "<th>_TargetVal0_</th>\n",
        "<th>_TargetVal1_</th>\n",
        "<th>_CI0_</th>\n",
        "<th>_CI1_</th>\n",
        "<th>_NodeID_</th>\n",
        "<th>_TreeLevel_</th>\n",
        "<th>_NodeName_</th>\n",
        "<th>_Parent_</th>\n",
        "<th>_ParentName_</th>\n",
        "<th>_NodeType_</th>\n",
        "<th>_Gain_</th>\n",
        "<th>_NumObs_</th>\n",
        "<th>_TargetValue_</th>\n",
        "<th>_NumChild_</th>\n",
        "<th>_ChildID0_</th>\n",
        "<th>_ChildID1_</th>\n",
        "<th>_PBranches_</th>\n",
        "<th>_PBNameL0_</th>\n",
        "<th>_PBNameL1_</th>\n",
        "<th>_PBNameL2_</th>\n",
        "<th>_PBName0_</th>\n",
        "<th>_PBName1_</th>\n",
        "<th>_PBName2_</th>\n",
        "</tr>\n",
        "</thead>\n",
        "<tbody>\n",
        "<tr>\n",
        "<td>1</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>2</td>\n",
        "<td>10</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.752284</td>\n",
        "<td>0.247716</td>\n",
        "<td>0</td>\n",
        "<td>0</td>\n",
        "<td>DemGender</td>\n",
        "<td>-1</td>\n",
        "<td></td>\n",
        "<td>1</td>\n",
        "<td>0.047713</td>\n",
        "<td>1688948</td>\n",
        "<td>No</td>\n",
        "<td>2</td>\n",
        "<td>1</td>\n",
        "<td>2</td>\n",
        "<td>0</td>\n",
        "<td>nan</td>\n",
        "<td>nan</td>\n",
        "<td>nan</td>\n",
        "<td></td>\n",
        "<td></td>\n",
        "<td></td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>2</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>2</td>\n",
        "<td>10</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.870955</td>\n",
        "<td>0.129045</td>\n",
        "<td>1</td>\n",
        "<td>1</td>\n",
        "<td>DemGender</td>\n",
        "<td>0</td>\n",
        "<td>DemGender</td>\n",
        "<td>1</td>\n",
        "<td>0.012886</td>\n",
        "<td>765624</td>\n",
        "<td>No</td>\n",
        "<td>2</td>\n",
        "<td>3</td>\n",
        "<td>4</td>\n",
        "<td>2</td>\n",
        "<td>1</td>\n",
        "<td>1</td>\n",
        "<td>nan</td>\n",
        "<td>M</td>\n",
        "<td>U</td>\n",
        "<td></td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>3</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>2</td>\n",
        "<td>10</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.653881</td>\n",
        "<td>0.346119</td>\n",
        "<td>2</td>\n",
        "<td>1</td>\n",
        "<td>PromClass</td>\n",
        "<td>0</td>\n",
        "<td>DemGender</td>\n",
        "<td>1</td>\n",
        "<td>0.009773</td>\n",
        "<td>923324</td>\n",
        "<td>No</td>\n",
        "<td>2</td>\n",
        "<td>5</td>\n",
        "<td>6</td>\n",
        "<td>1</td>\n",
        "<td>1</td>\n",
        "<td>nan</td>\n",
        "<td>nan</td>\n",
        "<td>F</td>\n",
        "<td></td>\n",
        "<td></td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>4</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>2</td>\n",
        "<td>10</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.921578</td>\n",
        "<td>0.078422</td>\n",
        "<td>3</td>\n",
        "<td>2</td>\n",
        "<td>PromClass</td>\n",
        "<td>1</td>\n",
        "<td>DemGender</td>\n",
        "<td>1</td>\n",
        "<td>0.005258</td>\n",
        "<td>323684</td>\n",
        "<td>No</td>\n",
        "<td>2</td>\n",
        "<td>7</td>\n",
        "<td>8</td>\n",
        "<td>1</td>\n",
        "<td>1</td>\n",
        "<td>nan</td>\n",
        "<td>nan</td>\n",
        "<td>U</td>\n",
        "<td></td>\n",
        "<td></td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>5</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>2</td>\n",
        "<td>10</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.833878</td>\n",
        "<td>0.166122</td>\n",
        "<td>4</td>\n",
        "<td>2</td>\n",
        "<td>PromClass</td>\n",
        "<td>1</td>\n",
        "<td>DemGender</td>\n",
        "<td>1</td>\n",
        "<td>0.010158</td>\n",
        "<td>441940</td>\n",
        "<td>No</td>\n",
        "<td>2</td>\n",
        "<td>9</td>\n",
        "<td>10</td>\n",
        "<td>1</td>\n",
        "<td>1</td>\n",
        "<td>nan</td>\n",
        "<td>nan</td>\n",
        "<td>M</td>\n",
        "<td></td>\n",
        "<td></td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>6</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>2</td>\n",
        "<td>10</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.730618</td>\n",
        "<td>0.269382</td>\n",
        "<td>5</td>\n",
        "<td>2</td>\n",
        "<td>PromClass</td>\n",
        "<td>2</td>\n",
        "<td>PromClass</td>\n",
        "<td>1</td>\n",
        "<td>0.001392</td>\n",
        "<td>289180</td>\n",
        "<td>No</td>\n",
        "<td>2</td>\n",
        "<td>11</td>\n",
        "<td>12</td>\n",
        "<td>2</td>\n",
        "<td>8</td>\n",
        "<td>8</td>\n",
        "<td>nan</td>\n",
        "<td>Gold</td>\n",
        "<td>Platinum</td>\n",
        "<td></td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>7</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>2</td>\n",
        "<td>10</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.618888</td>\n",
        "<td>0.381112</td>\n",
        "<td>6</td>\n",
        "<td>2</td>\n",
        "<td>PromClass</td>\n",
        "<td>2</td>\n",
        "<td>PromClass</td>\n",
        "<td>1</td>\n",
        "<td>0.003437</td>\n",
        "<td>634144</td>\n",
        "<td>No</td>\n",
        "<td>2</td>\n",
        "<td>13</td>\n",
        "<td>14</td>\n",
        "<td>2</td>\n",
        "<td>8</td>\n",
        "<td>8</td>\n",
        "<td>nan</td>\n",
        "<td>Silver</td>\n",
        "<td>Tin</td>\n",
        "<td></td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>8</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>2</td>\n",
        "<td>10</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.934902</td>\n",
        "<td>0.065098</td>\n",
        "<td>7</td>\n",
        "<td>3</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>3</td>\n",
        "<td>PromClass</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "<td>235828</td>\n",
        "<td>No</td>\n",
        "<td>0</td>\n",
        "<td>nan</td>\n",
        "<td>nan</td>\n",
        "<td>3</td>\n",
        "<td>8</td>\n",
        "<td>8</td>\n",
        "<td>8</td>\n",
        "<td>Silver</td>\n",
        "<td>Gold</td>\n",
        "<td>Platinum</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>9</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>2</td>\n",
        "<td>10</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.885813</td>\n",
        "<td>0.114187</td>\n",
        "<td>8</td>\n",
        "<td>3</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>3</td>\n",
        "<td>PromClass</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "<td>87856</td>\n",
        "<td>No</td>\n",
        "<td>0</td>\n",
        "<td>nan</td>\n",
        "<td>nan</td>\n",
        "<td>1</td>\n",
        "<td>8</td>\n",
        "<td>nan</td>\n",
        "<td>nan</td>\n",
        "<td>Tin</td>\n",
        "<td></td>\n",
        "<td></td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>10</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>2</td>\n",
        "<td>10</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.829902</td>\n",
        "<td>0.170098</td>\n",
        "<td>9</td>\n",
        "<td>3</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>4</td>\n",
        "<td>PromClass</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "<td>424460</td>\n",
        "<td>No</td>\n",
        "<td>0</td>\n",
        "<td>nan</td>\n",
        "<td>nan</td>\n",
        "<td>3</td>\n",
        "<td>8</td>\n",
        "<td>8</td>\n",
        "<td>8</td>\n",
        "<td>Silver</td>\n",
        "<td>Gold</td>\n",
        "<td>Tin</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>11</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>2</td>\n",
        "<td>10</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.930435</td>\n",
        "<td>0.069565</td>\n",
        "<td>10</td>\n",
        "<td>3</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>4</td>\n",
        "<td>PromClass</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "<td>17480</td>\n",
        "<td>No</td>\n",
        "<td>0</td>\n",
        "<td>nan</td>\n",
        "<td>nan</td>\n",
        "<td>1</td>\n",
        "<td>8</td>\n",
        "<td>nan</td>\n",
        "<td>nan</td>\n",
        "<td>Platinum</td>\n",
        "<td></td>\n",
        "<td></td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>12</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>2</td>\n",
        "<td>10</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.768879</td>\n",
        "<td>0.231121</td>\n",
        "<td>11</td>\n",
        "<td>3</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>5</td>\n",
        "<td>PromClass</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "<td>33212</td>\n",
        "<td>No</td>\n",
        "<td>0</td>\n",
        "<td>nan</td>\n",
        "<td>nan</td>\n",
        "<td>1</td>\n",
        "<td>8</td>\n",
        "<td>nan</td>\n",
        "<td>nan</td>\n",
        "<td>Platinum</td>\n",
        "<td></td>\n",
        "<td></td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>13</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>2</td>\n",
        "<td>10</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.725653</td>\n",
        "<td>0.274347</td>\n",
        "<td>12</td>\n",
        "<td>3</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>5</td>\n",
        "<td>PromClass</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "<td>255968</td>\n",
        "<td>No</td>\n",
        "<td>0</td>\n",
        "<td>nan</td>\n",
        "<td>nan</td>\n",
        "<td>1</td>\n",
        "<td>8</td>\n",
        "<td>nan</td>\n",
        "<td>nan</td>\n",
        "<td>Gold</td>\n",
        "<td></td>\n",
        "<td></td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>14</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>2</td>\n",
        "<td>10</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.581439</td>\n",
        "<td>0.418561</td>\n",
        "<td>13</td>\n",
        "<td>3</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>6</td>\n",
        "<td>PromClass</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "<td>280896</td>\n",
        "<td>No</td>\n",
        "<td>0</td>\n",
        "<td>nan</td>\n",
        "<td>nan</td>\n",
        "<td>1</td>\n",
        "<td>8</td>\n",
        "<td>nan</td>\n",
        "<td>nan</td>\n",
        "<td>Tin</td>\n",
        "<td></td>\n",
        "<td></td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>15</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>2</td>\n",
        "<td>10</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.648666</td>\n",
        "<td>0.351334</td>\n",
        "<td>14</td>\n",
        "<td>3</td>\n",
        "<td>TargetBuy</td>\n",
        "<td>6</td>\n",
        "<td>PromClass</td>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "<td>353248</td>\n",
        "<td>No</td>\n",
        "<td>0</td>\n",
        "<td>nan</td>\n",
        "<td>nan</td>\n",
        "<td>1</td>\n",
        "<td>8</td>\n",
        "<td>nan</td>\n",
        "<td>nan</td>\n",
        "<td>Silver</td>\n",
        "<td></td>\n",
        "<td></td>\n",
        "</tr>\n",
        "</tbody>\n",
        "</table>\n",
        "</div>\n",
        "<div class=\"cas-output-area\"></div>\n",
        "<table class=\"cas-results-performance\"><tr>\n",
        "<th>Elapsed</th><td>0.147s</td>\n",
        "<th>User</th><td>0.205s</td>\n",
        "<th>Sys</th><td>1.51s</td>\n",
        "<th>Mem</th><td>28.1MB</td>\n",
        "</tr></table>"
       ],
       "json": [
        "{\\u0022messages\\u0022: [], \\u0022session\\u0022: \\u0022B9DC4635-FD3B-4109-9374-135012147C8D\\u0022, \\u0022disposition\\u0022: {\\u0022reason\\u0022: 0, \\u0022severity\\u0022: 0, \\u0022debug\\u0022: null, \\u0022status\\u0022: null}, \\u0022signature\\u0022: {\\u0022params\\u0022: {\\u0022table.compondemand\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.varlist\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022table.orderby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isOrderBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022to\\u0022: {\\u0022default\\u0022: 100, \\u0022type\\u0022: \\u0022int64\\u0022}, \\u0022table.compvars\\u0022: {\\u0022isCompVar\\u0022: 1, \\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022table.name\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022isTableName\\u0022: 1, \\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.groupbyfmts\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022from\\u0022: {\\u0022default\\u0022: 1, \\u0022type\\u0022: \\u0022int64\\u0022}, \\u0022noindex\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.groupby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isGroupBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022maxrows\\u0022: {\\u0022default\\u0022: 1000, \\u0022type\\u0022: \\u0022int32\\u0022}, \\u0022format\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.caslib\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.comppgm\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022sastypes\\u0022: {\\u0022default\\u0022: 1, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.groupbymode\\u0022: {\\u0022default\\u0022: \\u0022NOSORT\\u0022, \\u0022allowedValues\\u0022: [\\u0022NOSORT\\u0022, \\u0022REDISTRIBUTE\\u0022], \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table\\u0022: {\\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022, \\u0022default\\u0022: \\u0022tmp_tree1\\u0022, \\u0022parmListTag\\u0022: \\u0022castable\\u0022, \\u0022isTableDef\\u0022: 1}, \\u0022table.where\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022isWhere\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}}, \\u0022label\\u0022: \\u0022Fetch Rows\\u0022, \\u0022desc\\u0022: \\u0022Fetch rows from a Central Analytic Server table\\u0022, \\u0022name\\u0022: \\u0022tkcastab.fetch\\u0022}, \\u0022performance\\u0022: {\\u0022systemCores\\u0022: 4608, \\u0022elapsedTime\\u0022: 0.14692, \\u0022cpuSystemTime\\u0022: 1.5117770000000001, \\u0022systemTotalMemory\\u0022: 38966284091392, \\u0022memory\\u0022: 29489056, \\u0022memorySystem\\u0022: 3684874288, \\u0022cpuUserTime\\u0022: 0.20497300000000002, \\u0022memoryOS\\u0022: 1823784960, \\u0022systemNodes\\u0022: 144, \\u0022memoryQuota\\u0022: 2255888384}}"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 25,
       "text": [
        "CASResults([('Fetch',     _Index_   _Target_  _NumTargetLevel_  _TargetValL_ _TargetVal0_  \\\n",
        "0         1  TargetBuy                 2            10           No   \n",
        "1         2  TargetBuy                 2            10           No   \n",
        "2         3  TargetBuy                 2            10           No   \n",
        "3         4  TargetBuy                 2            10           No   \n",
        "4         5  TargetBuy                 2            10           No   \n",
        "5         6  TargetBuy                 2            10           No   \n",
        "6         7  TargetBuy                 2            10           No   \n",
        "7         8  TargetBuy                 2            10           No   \n",
        "8         9  TargetBuy                 2            10           No   \n",
        "9        10  TargetBuy                 2            10           No   \n",
        "10       11  TargetBuy                 2            10           No   \n",
        "11       12  TargetBuy                 2            10           No   \n",
        "12       13  TargetBuy                 2            10           No   \n",
        "13       14  TargetBuy                 2            10           No   \n",
        "14       15  TargetBuy                 2            10           No   \n",
        "\n",
        "   _TargetVal1_     _CI0_     _CI1_  _NodeID_  _TreeLevel_     ...       \\\n",
        "0        Bought  0.752284  0.247716         0            0     ...        \n",
        "1        Bought  0.870955  0.129045         1            1     ...        \n",
        "2        Bought  0.653881  0.346119         2            1     ...        \n",
        "3        Bought  0.921578  0.078422         3            2     ...        \n",
        "4        Bought  0.833878  0.166122         4            2     ...        \n",
        "5        Bought  0.730618  0.269382         5            2     ...        \n",
        "6        Bought  0.618888  0.381112         6            2     ...        \n",
        "7        Bought  0.934902  0.065098         7            3     ...        \n",
        "8        Bought  0.885813  0.114187         8            3     ...        \n",
        "9        Bought  0.829902  0.170098         9            3     ...        \n",
        "10       Bought  0.930435  0.069565        10            3     ...        \n",
        "11       Bought  0.768879  0.231121        11            3     ...        \n",
        "12       Bought  0.725653  0.274347        12            3     ...        \n",
        "13       Bought  0.581439  0.418561        13            3     ...        \n",
        "14       Bought  0.648666  0.351334        14            3     ...        \n",
        "\n",
        "   _NumChild_  _ChildID0_ _ChildID1_  _PBranches_  _PBNameL0_  _PBNameL1_  \\\n",
        "0           2           1          2            0         NaN         NaN   \n",
        "1           2           3          4            2           1           1   \n",
        "2           2           5          6            1           1         NaN   \n",
        "3           2           7          8            1           1         NaN   \n",
        "4           2           9         10            1           1         NaN   \n",
        "5           2          11         12            2           8           8   \n",
        "6           2          13         14            2           8           8   \n",
        "7           0         NaN        NaN            3           8           8   \n",
        "8           0         NaN        NaN            1           8         NaN   \n",
        "9           0         NaN        NaN            3           8           8   \n",
        "10          0         NaN        NaN            1           8         NaN   \n",
        "11          0         NaN        NaN            1           8         NaN   \n",
        "12          0         NaN        NaN            1           8         NaN   \n",
        "13          0         NaN        NaN            1           8         NaN   \n",
        "14          0         NaN        NaN            1           8         NaN   \n",
        "\n",
        "   _PBNameL2_  _PBName0_  _PBName1_  _PBName2_  \n",
        "0         NaN                                   \n",
        "1         NaN          M          U             \n",
        "2         NaN          F                        \n",
        "3         NaN          U                        \n",
        "4         NaN          M                        \n",
        "5         NaN       Gold   Platinum             \n",
        "6         NaN     Silver        Tin             \n",
        "7           8     Silver       Gold   Platinum  \n",
        "8         NaN        Tin                        \n",
        "9           8     Silver       Gold        Tin  \n",
        "10        NaN   Platinum                        \n",
        "11        NaN   Platinum                        \n",
        "12        NaN       Gold                        \n",
        "13        NaN        Tin                        \n",
        "14        NaN     Silver                        \n",
        "\n",
        "[15 rows x 27 columns])])"
       ]
      }
     ],
     "prompt_number": 25
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "out['ModelInfo']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<table class=\"cas-dataframe\">\n",
        "<thead>\n",
        "<tr><th colspan=\"2\">Decision Tree for HPS.XIMENG.ORGANICS</th></tr>\n",
        "<tr>\n",
        "<th>Descr</th>\n",
        "<th>Value</th>\n",
        "</tr>\n",
        "</thead>\n",
        "<tbody>\n",
        "<tr>\n",
        "<td>Number of Tree Nodes</td>\n",
        "<td>15</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Max Number of Branches</td>\n",
        "<td>2</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Number of Levels</td>\n",
        "<td>4</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Max Number of Leaves</td>\n",
        "<td>8</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Number of Bins</td>\n",
        "<td>100</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Minimum Size of Leaves</td>\n",
        "<td>17480</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Maximum Size of Leaves</td>\n",
        "<td>424460</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Number of Variables</td>\n",
        "<td>3</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Confidence Level for Pruning</td>\n",
        "<td>0.25</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Number of Observations Used</td>\n",
        "<td>1688948</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>Misclassification Error (%)</td>\n",
        "<td>24.77163</td>\n",
        "</tr>\n",
        "</tbody>\n",
        "</table>"
       ],
       "javascript": [
        "\n",
        "   (function ($) {\n",
        "      var custom = $('link[rel=\"stylesheet\"][href^=\"/static/custom/custom.css\"]');\n",
        "      var head = $('head');\n",
        "      $.each([\"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/css/swat.css\", \"//cdn.datatables.net/1.10.3/css/jquery.dataTables.min.css\"], function (index, value) {\n",
        "         if ( $('link[rel=\"stylesheet\"][href=\"' + value + '\"]').length == 0 ) {\n",
        "            if ( custom.length > 0 ) {\n",
        "               custom.before($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            } else {\n",
        "               head.prepend($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            }\n",
        "         }\n",
        "      });\n",
        "   })($);\n",
        "\n",
        "   requirejs.config({enforceDefine:true});\n",
        "\n",
        "   require([\"datatables\", \"swat\"], function () {}, function (err) {\n",
        "      var ids = err.requireModules;\n",
        "      if ( ids && ids.length ) {\n",
        "         var configpaths = {\"datatables\": \"//cdn.datatables.net/1.10.3/js/jquery.dataTables.min\", \"swat\": \"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/js/swat\"};\n",
        "         for ( var i = 0; i < ids.length; i++ ) {\n",
        "            var id = ids[i];\n",
        "            var paths = {};\n",
        "            paths[id] = configpaths[id];\n",
        "            requirejs.undef(id);\n",
        "            requirejs.config({paths:paths});\n",
        "            require([id], function () {});\n",
        "         } \n",
        "      }\n",
        "   });\n",
        "   \n",
        "         require(['swat'], function (swat) {\n",
        "            new swat.CASDataFrame(element, JSON.parse('{\\u0022columns\\u0022: [{\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 0;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Descr\\u0022, \\u0022targets\\u0022: 0}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 1;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Value\\u0022, \\u0022targets\\u0022: 1}], \\u0022label\\u0022: \\u0022Decision Tree for HPS.XIMENG.ORGANICS\\u0022, \\u0022data\\u0022: [[[\\u0022Number of Tree Nodes\\u0022], [\\u002215\\u0022, 15.0]], [[\\u0022Max Number of Branches\\u0022], [\\u00222\\u0022, 2.0]], [[\\u0022Number of Levels\\u0022], [\\u00224\\u0022, 4.0]], [[\\u0022Max Number of Leaves\\u0022], [\\u00228\\u0022, 8.0]], [[\\u0022Number of Bins\\u0022], [\\u0022100\\u0022, 100.0]], [[\\u0022Minimum Size of Leaves\\u0022], [\\u002217480\\u0022, 17480.0]], [[\\u0022Maximum Size of Leaves\\u0022], [\\u0022424460\\u0022, 424460.0]], [[\\u0022Number of Variables\\u0022], [\\u00223\\u0022, 3.0]], [[\\u0022Confidence Level for Pruning\\u0022], [\\u00220.25\\u0022, 0.25]], [[\\u0022Number of Observations Used\\u0022], [\\u00221688948\\u0022, 1688948.0]], [[\\u0022Misclassification Error (%)\\u0022], [\\u002224.77163\\u0022, 24.771632992845248]]]}'));\n",
        "         });"
       ],
       "json": [
        "{\\u0022columns\\u0022: [{\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 0;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Descr\\u0022, \\u0022targets\\u0022: 0}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 1;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022Value\\u0022, \\u0022targets\\u0022: 1}], \\u0022label\\u0022: \\u0022Decision Tree for HPS.XIMENG.ORGANICS\\u0022, \\u0022data\\u0022: [[[\\u0022Number of Tree Nodes\\u0022], [\\u002215\\u0022, 15.0]], [[\\u0022Max Number of Branches\\u0022], [\\u00222\\u0022, 2.0]], [[\\u0022Number of Levels\\u0022], [\\u00224\\u0022, 4.0]], [[\\u0022Max Number of Leaves\\u0022], [\\u00228\\u0022, 8.0]], [[\\u0022Number of Bins\\u0022], [\\u0022100\\u0022, 100.0]], [[\\u0022Minimum Size of Leaves\\u0022], [\\u002217480\\u0022, 17480.0]], [[\\u0022Maximum Size of Leaves\\u0022], [\\u0022424460\\u0022, 424460.0]], [[\\u0022Number of Variables\\u0022], [\\u00223\\u0022, 3.0]], [[\\u0022Confidence Level for Pruning\\u0022], [\\u00220.25\\u0022, 0.25]], [[\\u0022Number of Observations Used\\u0022], [\\u00221688948\\u0022, 1688948.0]], [[\\u0022Misclassification Error (%)\\u0022], [\\u002224.77163\\u0022, 24.771632992845248]]]}"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 26,
       "text": [
        "                           Descr           Value\n",
        "0           Number of Tree Nodes       15.000000\n",
        "1         Max Number of Branches        2.000000\n",
        "2               Number of Levels        4.000000\n",
        "3           Max Number of Leaves        8.000000\n",
        "4                 Number of Bins      100.000000\n",
        "5         Minimum Size of Leaves    17480.000000\n",
        "6         Maximum Size of Leaves   424460.000000\n",
        "7            Number of Variables        3.000000\n",
        "8   Confidence Level for Pruning        0.250000\n",
        "9    Number of Observations Used  1688948.000000\n",
        "10   Misclassification Error (%)       24.771633"
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Interactive tree pruning"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "* Now let us prune the tree at certain nodes\n",
      "* Note that this also enables pruning using validation data set"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "castree2 = s.CASTable('tmp_tree2')\n",
      "castree2.setParams(replace=True)\n",
      "\n",
      "out = s.dtreeprune(model=castree1, casout=castree2, nodeid={3,4,5,6})\n",
      "\n",
      "pprint(out.messages)\n",
      "pprint(out.performance.elapsedTime)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[]\n",
        "0.368402\n"
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "castree2.setParams(varlist=['_Parent_','_NodeID_','_TreeLevel_','_TargetVal0_','_TargetVal1_','_CI0_','_CI1_','_Gain_'])\n",
      "s.fetch(table=castree2, to=100)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div><table class=\"cas-results-key\"><tr><th>Fetch</th></tr></table></div>\n",
        "<div class=\"cas-results-body\">\n",
        "<table class=\"cas-dataframe\">\n",
        "<thead>\n",
        "<tr><th colspan=\"9\">Selected Rows from Table TMP_TREE2</th></tr>\n",
        "<tr>\n",
        "<th>_Index_</th>\n",
        "<th>_Parent_</th>\n",
        "<th>_NodeID_</th>\n",
        "<th>_TreeLevel_</th>\n",
        "<th>_TargetVal0_</th>\n",
        "<th>_TargetVal1_</th>\n",
        "<th>_CI0_</th>\n",
        "<th>_CI1_</th>\n",
        "<th>_Gain_</th>\n",
        "</tr>\n",
        "</thead>\n",
        "<tbody>\n",
        "<tr>\n",
        "<td>1</td>\n",
        "<td>-1</td>\n",
        "<td>0</td>\n",
        "<td>0</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.752284</td>\n",
        "<td>0.247716</td>\n",
        "<td>0.047713</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>2</td>\n",
        "<td>0</td>\n",
        "<td>1</td>\n",
        "<td>1</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.870955</td>\n",
        "<td>0.129045</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "<td>2</td>\n",
        "<td>1</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.653881</td>\n",
        "<td>0.346119</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "</tbody>\n",
        "</table>\n",
        "</div>\n",
        "<div class=\"cas-output-area\"></div>\n",
        "<table class=\"cas-results-performance\"><tr>\n",
        "<th>Elapsed</th><td>0.128s</td>\n",
        "<th>User</th><td>0.168s</td>\n",
        "<th>Sys</th><td>1.52s</td>\n",
        "<th>Mem</th><td>9.96MB</td>\n",
        "</tr></table>"
       ],
       "javascript": [
        "\n",
        "   (function ($) {\n",
        "      var custom = $('link[rel=\"stylesheet\"][href^=\"/static/custom/custom.css\"]');\n",
        "      var head = $('head');\n",
        "      $.each([\"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/css/swat.css\", \"//cdn.datatables.net/1.10.3/css/jquery.dataTables.min.css\"], function (index, value) {\n",
        "         if ( $('link[rel=\"stylesheet\"][href=\"' + value + '\"]').length == 0 ) {\n",
        "            if ( custom.length > 0 ) {\n",
        "               custom.before($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            } else {\n",
        "               head.prepend($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            }\n",
        "         }\n",
        "      });\n",
        "   })($);\n",
        "\n",
        "   requirejs.config({enforceDefine:true});\n",
        "\n",
        "   require([\"datatables\", \"swat\"], function () {}, function (err) {\n",
        "      var ids = err.requireModules;\n",
        "      if ( ids && ids.length ) {\n",
        "         var configpaths = {\"datatables\": \"//cdn.datatables.net/1.10.3/js/jquery.dataTables.min\", \"swat\": \"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/js/swat\"};\n",
        "         for ( var i = 0; i < ids.length; i++ ) {\n",
        "            var id = ids[i];\n",
        "            var paths = {};\n",
        "            paths[id] = configpaths[id];\n",
        "            requirejs.undef(id);\n",
        "            requirejs.config({paths:paths});\n",
        "            require([id], function () {});\n",
        "         } \n",
        "      }\n",
        "   });\n",
        "   \n",
        "           require(['swat'], function (swat) {\n",
        "              new swat.CASResults(element, JSON.parse('{\\u0022messages\\u0022: [], \\u0022session\\u0022: \\u0022B9DC4635-FD3B-4109-9374-135012147C8D\\u0022, \\u0022disposition\\u0022: {\\u0022reason\\u0022: 0, \\u0022severity\\u0022: 0, \\u0022debug\\u0022: null, \\u0022status\\u0022: null}, \\u0022signature\\u0022: {\\u0022params\\u0022: {\\u0022table.compondemand\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.varlist\\u0022: {\\u0022default\\u0022: [\\u0022_Parent_\\u0022, \\u0022_NodeID_\\u0022, \\u0022_TreeLevel_\\u0022, \\u0022_TargetVal0_\\u0022, \\u0022_TargetVal1_\\u0022, \\u0022_CI0_\\u0022, \\u0022_CI1_\\u0022, \\u0022_Gain_\\u0022], \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022table.orderby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isOrderBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022to\\u0022: {\\u0022default\\u0022: 100, \\u0022type\\u0022: \\u0022int64\\u0022}, \\u0022table.compvars\\u0022: {\\u0022isCompVar\\u0022: 1, \\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022table.name\\u0022: {\\u0022default\\u0022: \\u0022tmp_tree2\\u0022, \\u0022isTableName\\u0022: 1, \\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.groupbyfmts\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022from\\u0022: {\\u0022default\\u0022: 1, \\u0022type\\u0022: \\u0022int64\\u0022}, \\u0022noindex\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.groupby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isGroupBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022maxrows\\u0022: {\\u0022default\\u0022: 1000, \\u0022type\\u0022: \\u0022int32\\u0022}, \\u0022format\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.caslib\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.comppgm\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022sastypes\\u0022: {\\u0022default\\u0022: 1, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.groupbymode\\u0022: {\\u0022default\\u0022: \\u0022NOSORT\\u0022, \\u0022allowedValues\\u0022: [\\u0022NOSORT\\u0022, \\u0022REDISTRIBUTE\\u0022], \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table\\u0022: {\\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022, \\u0022parmListTag\\u0022: \\u0022castable\\u0022, \\u0022isTableDef\\u0022: 1}, \\u0022table.where\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022isWhere\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}}, \\u0022label\\u0022: \\u0022Fetch Rows\\u0022, \\u0022desc\\u0022: \\u0022Fetch rows from a Central Analytic Server table\\u0022, \\u0022name\\u0022: \\u0022tkcastab.fetch\\u0022}, \\u0022performance\\u0022: {\\u0022systemCores\\u0022: 4608, \\u0022elapsedTime\\u0022: 0.12827000000000002, \\u0022cpuSystemTime\\u0022: 1.524759, \\u0022systemTotalMemory\\u0022: 38966284091392, \\u0022memory\\u0022: 10448928, \\u0022memorySystem\\u0022: 4158855904, \\u0022cpuUserTime\\u0022: 0.167982, \\u0022memoryOS\\u0022: 1839513600, \\u0022systemNodes\\u0022: 144, \\u0022memoryQuota\\u0022: 2540224512}}'), function (element) {\n",
        "                 \n",
        "   (function ($) {\n",
        "      var custom = $('link[rel=\"stylesheet\"][href^=\"/static/custom/custom.css\"]');\n",
        "      var head = $('head');\n",
        "      $.each([\"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/css/swat.css\", \"//cdn.datatables.net/1.10.3/css/jquery.dataTables.min.css\"], function (index, value) {\n",
        "         if ( $('link[rel=\"stylesheet\"][href=\"' + value + '\"]').length == 0 ) {\n",
        "            if ( custom.length > 0 ) {\n",
        "               custom.before($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            } else {\n",
        "               head.prepend($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            }\n",
        "         }\n",
        "      });\n",
        "   })($);\n",
        "\n",
        "   requirejs.config({enforceDefine:true});\n",
        "\n",
        "   require([\"datatables\", \"swat\"], function () {}, function (err) {\n",
        "      var ids = err.requireModules;\n",
        "      if ( ids && ids.length ) {\n",
        "         var configpaths = {\"datatables\": \"//cdn.datatables.net/1.10.3/js/jquery.dataTables.min\", \"swat\": \"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/js/swat\"};\n",
        "         for ( var i = 0; i < ids.length; i++ ) {\n",
        "            var id = ids[i];\n",
        "            var paths = {};\n",
        "            paths[id] = configpaths[id];\n",
        "            requirejs.undef(id);\n",
        "            requirejs.config({paths:paths});\n",
        "            require([id], function () {});\n",
        "         } \n",
        "      }\n",
        "   });\n",
        "   \n",
        "         require(['swat'], function (swat) {\n",
        "            new swat.CASDataFrame(element, JSON.parse('{\\u0022columns\\u0022: [{\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 0;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022_Index_\\u0022, \\u0022targets\\u0022: 0}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 1;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022_Parent_\\u0022, \\u0022targets\\u0022: 1}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 2;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022_NodeID_\\u0022, \\u0022targets\\u0022: 2}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 3;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022_TreeLevel_\\u0022, \\u0022targets\\u0022: 3}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 4;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022_TargetVal0_\\u0022, \\u0022targets\\u0022: 4}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 5;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022_TargetVal1_\\u0022, \\u0022targets\\u0022: 5}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 6;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022_CI0_\\u0022, \\u0022targets\\u0022: 6}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 7;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022_CI1_\\u0022, \\u0022targets\\u0022: 7}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 8;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022_Gain_\\u0022, \\u0022targets\\u0022: 8}], \\u0022label\\u0022: \\u0022Selected Rows from Table TMP_TREE2\\u0022, \\u0022data\\u0022: [[[\\u00221\\u0022, 1], [\\u0022-1\\u0022, -1.0], [\\u00220\\u0022, 0.0], [\\u00220\\u0022, 0.0], [\\u0022No\\u0022], [\\u0022Bought\\u0022], [\\u00220.752284\\u0022, 0.7522836700715475], [\\u00220.247716\\u0022, 0.2477163299284525], [\\u00220.047713\\u0022, 0.04771339960064966]], [[\\u00222\\u0022, 2], [\\u00220\\u0022, 0.0], [\\u00221\\u0022, 1.0], [\\u00221\\u0022, 1.0], [\\u0022No\\u0022], [\\u0022Bought\\u0022], [\\u00220.870955\\u0022, 0.870954933492158], [\\u00220.129045\\u0022, 0.12904506650784198], [\\u00220\\u0022, 0.0]], [[\\u00223\\u0022, 3], [\\u00220\\u0022, 0.0], [\\u00222\\u0022, 2.0], [\\u00221\\u0022, 1.0], [\\u0022No\\u0022], [\\u0022Bought\\u0022], [\\u00220.653881\\u0022, 0.6538809778582599], [\\u00220.346119\\u0022, 0.34611902214174006], [\\u00220\\u0022, 0.0]]]}'));\n",
        "         });\n",
        "              });\n",
        "           });"
       ],
       "json": [
        "{\\u0022messages\\u0022: [], \\u0022session\\u0022: \\u0022B9DC4635-FD3B-4109-9374-135012147C8D\\u0022, \\u0022disposition\\u0022: {\\u0022reason\\u0022: 0, \\u0022severity\\u0022: 0, \\u0022debug\\u0022: null, \\u0022status\\u0022: null}, \\u0022signature\\u0022: {\\u0022params\\u0022: {\\u0022table.compondemand\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.varlist\\u0022: {\\u0022default\\u0022: [\\u0022_Parent_\\u0022, \\u0022_NodeID_\\u0022, \\u0022_TreeLevel_\\u0022, \\u0022_TargetVal0_\\u0022, \\u0022_TargetVal1_\\u0022, \\u0022_CI0_\\u0022, \\u0022_CI1_\\u0022, \\u0022_Gain_\\u0022], \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022table.orderby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isOrderBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022to\\u0022: {\\u0022default\\u0022: 100, \\u0022type\\u0022: \\u0022int64\\u0022}, \\u0022table.compvars\\u0022: {\\u0022isCompVar\\u0022: 1, \\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022table.name\\u0022: {\\u0022default\\u0022: \\u0022tmp_tree2\\u0022, \\u0022isTableName\\u0022: 1, \\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.groupbyfmts\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022from\\u0022: {\\u0022default\\u0022: 1, \\u0022type\\u0022: \\u0022int64\\u0022}, \\u0022noindex\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.groupby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isGroupBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022maxrows\\u0022: {\\u0022default\\u0022: 1000, \\u0022type\\u0022: \\u0022int32\\u0022}, \\u0022format\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.caslib\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.comppgm\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022sastypes\\u0022: {\\u0022default\\u0022: 1, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.groupbymode\\u0022: {\\u0022default\\u0022: \\u0022NOSORT\\u0022, \\u0022allowedValues\\u0022: [\\u0022NOSORT\\u0022, \\u0022REDISTRIBUTE\\u0022], \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table\\u0022: {\\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022, \\u0022parmListTag\\u0022: \\u0022castable\\u0022, \\u0022isTableDef\\u0022: 1}, \\u0022table.where\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022isWhere\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}}, \\u0022label\\u0022: \\u0022Fetch Rows\\u0022, \\u0022desc\\u0022: \\u0022Fetch rows from a Central Analytic Server table\\u0022, \\u0022name\\u0022: \\u0022tkcastab.fetch\\u0022}, \\u0022performance\\u0022: {\\u0022systemCores\\u0022: 4608, \\u0022elapsedTime\\u0022: 0.12827000000000002, \\u0022cpuSystemTime\\u0022: 1.524759, \\u0022systemTotalMemory\\u0022: 38966284091392, \\u0022memory\\u0022: 10448928, \\u0022memorySystem\\u0022: 4158855904, \\u0022cpuUserTime\\u0022: 0.167982, \\u0022memoryOS\\u0022: 1839513600, \\u0022systemNodes\\u0022: 144, \\u0022memoryQuota\\u0022: 2540224512}}"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 28,
       "text": [
        "CASResults([('Fetch',    _Index_  _Parent_  _NodeID_  _TreeLevel_ _TargetVal0_ _TargetVal1_  \\\n",
        "0        1        -1         0            0           No       Bought   \n",
        "1        2         0         1            1           No       Bought   \n",
        "2        3         0         2            1           No       Bought   \n",
        "\n",
        "      _CI0_     _CI1_    _Gain_  \n",
        "0  0.752284  0.247716  0.047713  \n",
        "1  0.870955  0.129045  0.000000  \n",
        "2  0.653881  0.346119  0.000000  )])"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Interactive tree splitting"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "* Split one level down at node 2"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "castree3 = s.CASTable('tmp_tree3')\n",
      "castree3.setParams(replace=True)\n",
      "\n",
      "out = s.dtreesplit(table=dat1, model=castree2, casout=castree3, nodeid={2}, maxlevel=3)\n",
      "\n",
      "pprint(out.messages)\n",
      "pprint(out.performance.elapsedTime)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "[]\n",
        "4.257505\n"
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "castree3.setParams(varlist=['_Parent_','_NodeID_','_TreeLevel_','_TargetVal0_','_TargetVal1_','_CI0_','_CI1_','_Gain_'])\n",
      "s.fetch(table=castree3, to=100)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div><table class=\"cas-results-key\"><tr><th>Fetch</th></tr></table></div>\n",
        "<div class=\"cas-results-body\">\n",
        "<table class=\"cas-dataframe\">\n",
        "<thead>\n",
        "<tr><th colspan=\"9\">Selected Rows from Table TMP_TREE3</th></tr>\n",
        "<tr>\n",
        "<th>_Index_</th>\n",
        "<th>_Parent_</th>\n",
        "<th>_NodeID_</th>\n",
        "<th>_TreeLevel_</th>\n",
        "<th>_TargetVal0_</th>\n",
        "<th>_TargetVal1_</th>\n",
        "<th>_CI0_</th>\n",
        "<th>_CI1_</th>\n",
        "<th>_Gain_</th>\n",
        "</tr>\n",
        "</thead>\n",
        "<tbody>\n",
        "<tr>\n",
        "<td>1</td>\n",
        "<td>-1</td>\n",
        "<td>0</td>\n",
        "<td>0</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.752284</td>\n",
        "<td>0.247716</td>\n",
        "<td>0.047713</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>2</td>\n",
        "<td>0</td>\n",
        "<td>1</td>\n",
        "<td>1</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.870955</td>\n",
        "<td>0.129045</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>3</td>\n",
        "<td>0</td>\n",
        "<td>2</td>\n",
        "<td>1</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.653881</td>\n",
        "<td>0.346119</td>\n",
        "<td>0.009773</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>4</td>\n",
        "<td>2</td>\n",
        "<td>3</td>\n",
        "<td>2</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.730618</td>\n",
        "<td>0.269382</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "<tr>\n",
        "<td>5</td>\n",
        "<td>2</td>\n",
        "<td>4</td>\n",
        "<td>2</td>\n",
        "<td>No</td>\n",
        "<td>Bought</td>\n",
        "<td>0.618888</td>\n",
        "<td>0.381112</td>\n",
        "<td>0</td>\n",
        "</tr>\n",
        "</tbody>\n",
        "</table>\n",
        "</div>\n",
        "<div class=\"cas-output-area\"></div>\n",
        "<table class=\"cas-results-performance\"><tr>\n",
        "<th>Elapsed</th><td>0.171s</td>\n",
        "<th>User</th><td>0.153s</td>\n",
        "<th>Sys</th><td>1.54s</td>\n",
        "<th>Mem</th><td>11MB</td>\n",
        "</tr></table>"
       ],
       "javascript": [
        "\n",
        "   (function ($) {\n",
        "      var custom = $('link[rel=\"stylesheet\"][href^=\"/static/custom/custom.css\"]');\n",
        "      var head = $('head');\n",
        "      $.each([\"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/css/swat.css\", \"//cdn.datatables.net/1.10.3/css/jquery.dataTables.min.css\"], function (index, value) {\n",
        "         if ( $('link[rel=\"stylesheet\"][href=\"' + value + '\"]').length == 0 ) {\n",
        "            if ( custom.length > 0 ) {\n",
        "               custom.before($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            } else {\n",
        "               head.prepend($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            }\n",
        "         }\n",
        "      });\n",
        "   })($);\n",
        "\n",
        "   requirejs.config({enforceDefine:true});\n",
        "\n",
        "   require([\"datatables\", \"swat\"], function () {}, function (err) {\n",
        "      var ids = err.requireModules;\n",
        "      if ( ids && ids.length ) {\n",
        "         var configpaths = {\"datatables\": \"//cdn.datatables.net/1.10.3/js/jquery.dataTables.min\", \"swat\": \"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/js/swat\"};\n",
        "         for ( var i = 0; i < ids.length; i++ ) {\n",
        "            var id = ids[i];\n",
        "            var paths = {};\n",
        "            paths[id] = configpaths[id];\n",
        "            requirejs.undef(id);\n",
        "            requirejs.config({paths:paths});\n",
        "            require([id], function () {});\n",
        "         } \n",
        "      }\n",
        "   });\n",
        "   \n",
        "           require(['swat'], function (swat) {\n",
        "              new swat.CASResults(element, JSON.parse('{\\u0022messages\\u0022: [], \\u0022session\\u0022: \\u0022B9DC4635-FD3B-4109-9374-135012147C8D\\u0022, \\u0022disposition\\u0022: {\\u0022reason\\u0022: 0, \\u0022severity\\u0022: 0, \\u0022debug\\u0022: null, \\u0022status\\u0022: null}, \\u0022signature\\u0022: {\\u0022params\\u0022: {\\u0022table.compondemand\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.varlist\\u0022: {\\u0022default\\u0022: [\\u0022_Parent_\\u0022, \\u0022_NodeID_\\u0022, \\u0022_TreeLevel_\\u0022, \\u0022_TargetVal0_\\u0022, \\u0022_TargetVal1_\\u0022, \\u0022_CI0_\\u0022, \\u0022_CI1_\\u0022, \\u0022_Gain_\\u0022], \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022table.orderby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isOrderBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022to\\u0022: {\\u0022default\\u0022: 100, \\u0022type\\u0022: \\u0022int64\\u0022}, \\u0022table.compvars\\u0022: {\\u0022isCompVar\\u0022: 1, \\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022table.name\\u0022: {\\u0022default\\u0022: \\u0022tmp_tree3\\u0022, \\u0022isTableName\\u0022: 1, \\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.groupbyfmts\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022from\\u0022: {\\u0022default\\u0022: 1, \\u0022type\\u0022: \\u0022int64\\u0022}, \\u0022noindex\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.groupby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isGroupBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022maxrows\\u0022: {\\u0022default\\u0022: 1000, \\u0022type\\u0022: \\u0022int32\\u0022}, \\u0022format\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.caslib\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.comppgm\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022sastypes\\u0022: {\\u0022default\\u0022: 1, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.groupbymode\\u0022: {\\u0022default\\u0022: \\u0022NOSORT\\u0022, \\u0022allowedValues\\u0022: [\\u0022NOSORT\\u0022, \\u0022REDISTRIBUTE\\u0022], \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table\\u0022: {\\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022, \\u0022parmListTag\\u0022: \\u0022castable\\u0022, \\u0022isTableDef\\u0022: 1}, \\u0022table.where\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022isWhere\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}}, \\u0022label\\u0022: \\u0022Fetch Rows\\u0022, \\u0022desc\\u0022: \\u0022Fetch rows from a Central Analytic Server table\\u0022, \\u0022name\\u0022: \\u0022tkcastab.fetch\\u0022}, \\u0022performance\\u0022: {\\u0022systemCores\\u0022: 4608, \\u0022elapsedTime\\u0022: 0.170808, \\u0022cpuSystemTime\\u0022: 1.542772, \\u0022systemTotalMemory\\u0022: 38966284091392, \\u0022memory\\u0022: 11526176, \\u0022memorySystem\\u0022: 4187784256, \\u0022cpuUserTime\\u0022: 0.152981, \\u0022memoryOS\\u0022: 2098249728, \\u0022systemNodes\\u0022: 144, \\u0022memoryQuota\\u0022: 2549661696}}'), function (element) {\n",
        "                 \n",
        "   (function ($) {\n",
        "      var custom = $('link[rel=\"stylesheet\"][href^=\"/static/custom/custom.css\"]');\n",
        "      var head = $('head');\n",
        "      $.each([\"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/css/swat.css\", \"//cdn.datatables.net/1.10.3/css/jquery.dataTables.min.css\"], function (index, value) {\n",
        "         if ( $('link[rel=\"stylesheet\"][href=\"' + value + '\"]').length == 0 ) {\n",
        "            if ( custom.length > 0 ) {\n",
        "               custom.before($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            } else {\n",
        "               head.prepend($('<link />', {type:'text/css', href:value, rel:'stylesheet'})); \n",
        "            }\n",
        "         }\n",
        "      });\n",
        "   })($);\n",
        "\n",
        "   requirejs.config({enforceDefine:true});\n",
        "\n",
        "   require([\"datatables\", \"swat\"], function () {}, function (err) {\n",
        "      var ids = err.requireModules;\n",
        "      if ( ids && ids.length ) {\n",
        "         var configpaths = {\"datatables\": \"//cdn.datatables.net/1.10.3/js/jquery.dataTables.min\", \"swat\": \"//bb02plx01.unx.sas.com/sas/dev/mva-v9cas/tkcas/misc/python/js/swat\"};\n",
        "         for ( var i = 0; i < ids.length; i++ ) {\n",
        "            var id = ids[i];\n",
        "            var paths = {};\n",
        "            paths[id] = configpaths[id];\n",
        "            requirejs.undef(id);\n",
        "            requirejs.config({paths:paths});\n",
        "            require([id], function () {});\n",
        "         } \n",
        "      }\n",
        "   });\n",
        "   \n",
        "         require(['swat'], function (swat) {\n",
        "            new swat.CASDataFrame(element, JSON.parse('{\\u0022columns\\u0022: [{\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 0;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022_Index_\\u0022, \\u0022targets\\u0022: 0}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 1;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022_Parent_\\u0022, \\u0022targets\\u0022: 1}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 2;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022_NodeID_\\u0022, \\u0022targets\\u0022: 2}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 3;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022_TreeLevel_\\u0022, \\u0022targets\\u0022: 3}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 4;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022_TargetVal0_\\u0022, \\u0022targets\\u0022: 4}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 5;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022_TargetVal1_\\u0022, \\u0022targets\\u0022: 5}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 6;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022_CI0_\\u0022, \\u0022targets\\u0022: 6}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 7;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022_CI1_\\u0022, \\u0022targets\\u0022: 7}, {\\u0022data\\u0022: \\u0022function (row, type, val, meta) {                   var i = 8;                   if ( type === \\u0027set\\u0027 ) { return; }                   else if ( type === \\u0027display\\u0027 ) { return row[i][0]; }                   else if ( type === \\u0027filter\\u0027 ) { return $.choose(row[i][2], row[i][0]); }                   else if ( type === \\u0027sort\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   else if ( type === \\u0027type\\u0027 ) { return $.choose(row[i][1], row[i][0]); }                   return row[i][0];                }\\u0022, \\u0022title\\u0022: \\u0022_Gain_\\u0022, \\u0022targets\\u0022: 8}], \\u0022label\\u0022: \\u0022Selected Rows from Table TMP_TREE3\\u0022, \\u0022data\\u0022: [[[\\u00221\\u0022, 1], [\\u0022-1\\u0022, -1.0], [\\u00220\\u0022, 0.0], [\\u00220\\u0022, 0.0], [\\u0022No\\u0022], [\\u0022Bought\\u0022], [\\u00220.752284\\u0022, 0.7522836700715475], [\\u00220.247716\\u0022, 0.2477163299284525], [\\u00220.047713\\u0022, 0.04771339960064966]], [[\\u00222\\u0022, 2], [\\u00220\\u0022, 0.0], [\\u00221\\u0022, 1.0], [\\u00221\\u0022, 1.0], [\\u0022No\\u0022], [\\u0022Bought\\u0022], [\\u00220.870955\\u0022, 0.870954933492158], [\\u00220.129045\\u0022, 0.12904506650784198], [\\u00220\\u0022, 0.0]], [[\\u00223\\u0022, 3], [\\u00220\\u0022, 0.0], [\\u00222\\u0022, 2.0], [\\u00221\\u0022, 1.0], [\\u0022No\\u0022], [\\u0022Bought\\u0022], [\\u00220.653881\\u0022, 0.6538809778582599], [\\u00220.346119\\u0022, 0.34611902214174006], [\\u00220.009773\\u0022, 0.009772974934380398]], [[\\u00224\\u0022, 4], [\\u00222\\u0022, 2.0], [\\u00223\\u0022, 3.0], [\\u00222\\u0022, 2.0], [\\u0022No\\u0022], [\\u0022Bought\\u0022], [\\u00220.730618\\u0022, 0.7306176084099869], [\\u00220.269382\\u0022, 0.26938239159001315], [\\u00220\\u0022, 0.0]], [[\\u00225\\u0022, 5], [\\u00222\\u0022, 2.0], [\\u00224\\u0022, 4.0], [\\u00222\\u0022, 2.0], [\\u0022No\\u0022], [\\u0022Bought\\u0022], [\\u00220.618888\\u0022, 0.6188878235858102], [\\u00220.381112\\u0022, 0.3811121764141898], [\\u00220\\u0022, 0.0]]]}'));\n",
        "         });\n",
        "              });\n",
        "           });"
       ],
       "json": [
        "{\\u0022messages\\u0022: [], \\u0022session\\u0022: \\u0022B9DC4635-FD3B-4109-9374-135012147C8D\\u0022, \\u0022disposition\\u0022: {\\u0022reason\\u0022: 0, \\u0022severity\\u0022: 0, \\u0022debug\\u0022: null, \\u0022status\\u0022: null}, \\u0022signature\\u0022: {\\u0022params\\u0022: {\\u0022table.compondemand\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.varlist\\u0022: {\\u0022default\\u0022: [\\u0022_Parent_\\u0022, \\u0022_NodeID_\\u0022, \\u0022_TreeLevel_\\u0022, \\u0022_TargetVal0_\\u0022, \\u0022_TargetVal1_\\u0022, \\u0022_CI0_\\u0022, \\u0022_CI1_\\u0022, \\u0022_Gain_\\u0022], \\u0022isVar\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022table.orderby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isOrderBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022to\\u0022: {\\u0022default\\u0022: 100, \\u0022type\\u0022: \\u0022int64\\u0022}, \\u0022table.compvars\\u0022: {\\u0022isCompVar\\u0022: 1, \\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022table.name\\u0022: {\\u0022default\\u0022: \\u0022tmp_tree3\\u0022, \\u0022isTableName\\u0022: 1, \\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.groupbyfmts\\u0022: {\\u0022default\\u0022: [], \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022from\\u0022: {\\u0022default\\u0022: 1, \\u0022type\\u0022: \\u0022int64\\u0022}, \\u0022noindex\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.groupby\\u0022: {\\u0022default\\u0022: [], \\u0022isVar\\u0022: 1, \\u0022isGroupBy\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022}, \\u0022maxrows\\u0022: {\\u0022default\\u0022: 1000, \\u0022type\\u0022: \\u0022int32\\u0022}, \\u0022format\\u0022: {\\u0022default\\u0022: 0, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.caslib\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table.comppgm\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022sastypes\\u0022: {\\u0022default\\u0022: 1, \\u0022type\\u0022: \\u0022boolean\\u0022}, \\u0022table.groupbymode\\u0022: {\\u0022default\\u0022: \\u0022NOSORT\\u0022, \\u0022allowedValues\\u0022: [\\u0022NOSORT\\u0022, \\u0022REDISTRIBUTE\\u0022], \\u0022type\\u0022: \\u0022string\\u0022}, \\u0022table\\u0022: {\\u0022isRequired\\u0022: 1, \\u0022type\\u0022: \\u0022list\\u0022, \\u0022parmListTag\\u0022: \\u0022castable\\u0022, \\u0022isTableDef\\u0022: 1}, \\u0022table.where\\u0022: {\\u0022default\\u0022: \\u0022\\u0022, \\u0022isWhere\\u0022: 1, \\u0022type\\u0022: \\u0022string\\u0022}}, \\u0022label\\u0022: \\u0022Fetch Rows\\u0022, \\u0022desc\\u0022: \\u0022Fetch rows from a Central Analytic Server table\\u0022, \\u0022name\\u0022: \\u0022tkcastab.fetch\\u0022}, \\u0022performance\\u0022: {\\u0022systemCores\\u0022: 4608, \\u0022elapsedTime\\u0022: 0.170808, \\u0022cpuSystemTime\\u0022: 1.542772, \\u0022systemTotalMemory\\u0022: 38966284091392, \\u0022memory\\u0022: 11526176, \\u0022memorySystem\\u0022: 4187784256, \\u0022cpuUserTime\\u0022: 0.152981, \\u0022memoryOS\\u0022: 2098249728, \\u0022systemNodes\\u0022: 144, \\u0022memoryQuota\\u0022: 2549661696}}"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 30,
       "text": [
        "CASResults([('Fetch',    _Index_  _Parent_  _NodeID_  _TreeLevel_ _TargetVal0_ _TargetVal1_  \\\n",
        "0        1        -1         0            0           No       Bought   \n",
        "1        2         0         1            1           No       Bought   \n",
        "2        3         0         2            1           No       Bought   \n",
        "3        4         2         3            2           No       Bought   \n",
        "4        5         2         4            2           No       Bought   \n",
        "\n",
        "      _CI0_     _CI1_    _Gain_  \n",
        "0  0.752284  0.247716  0.047713  \n",
        "1  0.870955  0.129045  0.000000  \n",
        "2  0.653881  0.346119  0.009773  \n",
        "3  0.730618  0.269382  0.000000  \n",
        "4  0.618888  0.381112  0.000000  )])"
       ]
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Output of decision tree results using Ipython widgets"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "out = s.fetch(table=castree1, to=100)\n",
      "tmpdf = out['Fetch']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 31
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def get_nodes(nodeID = 0, response = False, depth = False, gain = False, stacked = False ):\n",
      "    \n",
      "    list1 = ['_Parent_','_NodeID_']\n",
      "    if depth    == True: list1 += ['_TreeLevel_']\n",
      "    if response == True: list1 += ['_TargetVal0_','_TargetVal1_','_CI0_','_CI1_']\n",
      "    if gain     == True: list1 += ['_Gain_']\n",
      "        \n",
      "    output = tmpdf.ix[ (tmpdf['_NodeID_'] == nodeID) | (tmpdf['_Parent_'] == nodeID)]\n",
      "    pprint(output[list1])\n",
      "    \n",
      "    if stacked == False:\n",
      "        bar = vc.GroupedBar( output[['_CI0_', '_CI1_']] )\n",
      "    else:\n",
      "        bar = vc.StackedBar( output[['_CI0_', '_CI1_']] )\n",
      "    bar.height = 200\n",
      "    bar.length = 50\n",
      "    bar.legend(title='Response')\n",
      "    bar.colors(brew='Accent')\n",
      "    bar.display()\n",
      "\n",
      "nodelist1 = tmpdf[ tmpdf['_NodeName_'] != 'TargetBuy' ]['_NodeID_'].tolist()\n",
      "s1 = widgets.DropdownWidget (values=nodelist1)\n",
      "\n",
      "vc.core.initialize_notebook()\n",
      "\n",
      "interact(get_nodes, nodeID = s1, response = True, depth = False, gain = False, stacked = False )"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "   _Parent_  _NodeID_ _TargetVal0_ _TargetVal1_     _CI0_     _CI1_\n",
        "0        -1         0           No       Bought  0.752284  0.247716\n",
        "1         0         1           No       Bought  0.870955  0.129045\n",
        "2         0         2           No       Bought  0.653881  0.346119\n"
       ]
      },
      {
       "html": [
        "<div id=\"vis034c4ef7c7d94c14ad86d5a02676932a\"></div>\n",
        "<script>\n",
        "   ( function() {\n",
        "     var _do_plot = function() {\n",
        "       if (typeof vg === 'undefined') {\n",
        "         window.addEventListener('vincent_libs_loaded', _do_plot)\n",
        "         return;\n",
        "       }\n",
        "       vg.parse.spec({\"axes\": [{\"scale\": \"x\", \"type\": \"x\"}, {\"scale\": \"y\", \"type\": \"y\"}], \"data\": [{\"name\": \"table\", \"values\": [{\"col\": \"_CI0_\", \"idx\": 0, \"val\": 0.7522836700715475}, {\"col\": \"_CI1_\", \"idx\": 0, \"val\": 0.2477163299284525}, {\"col\": \"_CI0_\", \"idx\": 1, \"val\": 0.870954933492158}, {\"col\": \"_CI1_\", \"idx\": 1, \"val\": 0.12904506650784198}, {\"col\": \"_CI0_\", \"idx\": 2, \"val\": 0.6538809778582599}, {\"col\": \"_CI1_\", \"idx\": 2, \"val\": 0.34611902214174006}]}], \"height\": 200, \"legends\": [{\"fill\": \"color\", \"offset\": 0, \"properties\": {}, \"title\": \"Response\"}], \"marks\": [{\"from\": {\"data\": \"table\", \"transform\": [{\"keys\": [\"data.idx\"], \"type\": \"facet\"}]}, \"marks\": [{\"properties\": {\"enter\": {\"fill\": {\"field\": \"data.col\", \"scale\": \"color\"}, \"width\": {\"band\": true, \"offset\": -1, \"scale\": \"pos\"}, \"x\": {\"field\": \"data.col\", \"scale\": \"pos\"}, \"y\": {\"field\": \"data.val\", \"scale\": \"y\"}, \"y2\": {\"scale\": \"y\", \"value\": 0}}}, \"type\": \"rect\"}], \"properties\": {\"enter\": {\"width\": {\"band\": true, \"scale\": \"x\"}, \"x\": {\"field\": \"key\", \"scale\": \"x\"}}}, \"scales\": [{\"domain\": {\"field\": \"data.col\"}, \"name\": \"pos\", \"range\": \"width\", \"type\": \"ordinal\"}], \"type\": \"group\"}], \"padding\": \"auto\", \"scales\": [{\"domain\": {\"data\": \"table\", \"field\": \"data.idx\"}, \"name\": \"x\", \"padding\": 0.2, \"range\": \"width\", \"type\": \"ordinal\"}, {\"domain\": {\"data\": \"table\", \"field\": \"data.val\"}, \"name\": \"y\", \"nice\": true, \"range\": \"height\"}, {\"domain\": {\"data\": \"table\", \"field\": \"data.col\"}, \"name\": \"color\", \"range\": [\"#7fc97f\", \"#beaed4\", \"#fdc086\", \"#ffff99\", \"#386cb0\", \"#f0027f\", \"#bf5b17\", \"#666666\"], \"type\": \"ordinal\"}], \"width\": 960}, function(chart) {\n",
        "         chart({el: \"#vis034c4ef7c7d94c14ad86d5a02676932a\"}).update();\n",
        "       });\n",
        "     };\n",
        "     _do_plot();\n",
        "   })();\n",
        "</script>\n",
        "<style>.vega canvas {width: 100%;}</style>\n",
        "        "
       ],
       "metadata": {},
       "output_type": "display_data",
       "text": [
        "<IPython.core.display.HTML at 0xaf44048>"
       ]
      },
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 32,
       "text": [
        "<function __main__.get_nodes>"
       ]
      }
     ],
     "prompt_number": 32
    }
   ],
   "metadata": {}
  }
 ]
}
